//НАЧАЛО -- Бурков 22.10.03
Перем НачальнаяДатаДокумента; 
Перем Новый;
Перем СписокДействий;

Перем Сч621, Сч6212, Сч6211;
Перем СКД6211, СКД6212;
Перем БИ62;

Перем ТекущаяКасса, НачальныйНомер;

Перем СвободныйОстаток;

//---------------------------
// НАЗНАЧЕНИЕ:
//	Расчет временных итогов.
//---------------------------
Процедура РассчитатьБИ62()
	БИ62 = СоздатьОбъект("БухгалтерскиеИтоги");
	
	Если Выбран() = 1 Тогда
		БИ62.Рассчитать(, СформироватьПозициюДокумента(ТекущийДокумент(),-1), СписокСубсчетов);
	Иначе
		БИ62.Рассчитать(ДатаДок, ДатаДок, СписокСубсчетов);
	КонецЕсли;
КонецПроцедуры//РассчитатьБИ62()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Рассчитывает сумму для погашения долга
//---------------------------
Процедура Расчет()
	//определим сальдо на счетах
	Если КоррСчет = Сч621 Тогда
		СКД6211 = БИ62.СКД(Сч6211, "С",  , Субконто1, Субконто2, Субконто3);
		СКД6212 = БИ62.СКД(Сч6212, "С",  , Субконто1, Субконто2 ,Субконто3);
	ИначеЕсли КоррСчет = Сч6211 Тогда
		СКД6211 = БИ62.СКД(Сч6211, "С",  , Субконто1, Субконто2, Субконто3);
		СКД6212 = 0;
	ИначеЕсли КоррСчет = Сч6212 Тогда
		СКД6211 = 0;
		СКД6212 = БИ62.СКД(Сч6212, "С",  , Субконто1, Субконто2 ,Субконто3);
	КонецЕсли;
	
	//определим нужно ли взимать инкассацию с клиента
	ВзиматьИнкассацию = 0;
	Если ПустоеЗначение(Субконто2) = 0 Тогда
		ВзиматьИнкассацию = Субконто2.ВзиматьИнкассацию;
	КонецЕсли;
	
	Если ВзиматьИнкассацию = 1 Тогда
		//нужно
		СтавкаНДСИнк = Константа.Инкассация.СтавкаНДС.Получить(ДатаДок).Ставка;
		Если Субконто1.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
			СтавкаНПИнк = Константа.Инкассация.СтавкаНП.Получить(ДатаДок).Ставка;
		Иначе
			СтавкаНПИнк = 0;
		КонецЕсли;
		СборЗаИнкассацию = Константа.СборЗаИнкассацию;
		
		СуммаИнкассации = Окр(СборЗаИнкассацию/100*Сумма/(1+СборЗаИнкассацию/100*(1 + СтавкаНДСИнк/100 + СтавкаНПИнк/100 + СтавкаНДСИнк*СтавкаНПИнк/10000)), 2);
		НДСИнкассации = Окр(СуммаИнкассации*СтавкаНДСИнк/100, 2);
		НПИнкассации = Окр((СуммаИнкассации + НДСИнкассации)*СтавкаНПИнк/100, 2);
		СуммаИнкассации = СуммаИнкассации + НДСИнкассации + НПИнкассации;
		
		СуммаДляПогашения = Сумма - СуммаИнкассации;
	Иначе
		//не нужно взимать
		СуммаДляПогашения = Сумма;
		СуммаИнкассации = 0; НДСИнкассации = 0; НПИнкассации = 0;
	КонецЕсли;//ВзиматьИнкассацию = 1

	Сумма6211 = 0; Сумма6212 = 0; НП6212 = 0;
	
	//погашаем сначала счет 62.1.2
	Если Макс(СКД6212, 0)<>0 Тогда
		Сумма6212 = Окр(СКД6212*(100+Константа.ОсновнаяСтавкаНП.Ставка)/100, 2);//сумма с НП
		НП6212 = Сумма6212 - СКД6212;
		
		Если СуммаДляПогашения<Сумма6212 Тогда
			Сумма6212 = СуммаДляПогашения;
			НП6212 = Окр(Сумма6212*Константа.ОсновнаяСтавкаНП.Ставка/(100+Константа.ОсновнаяСтавкаНП.Ставка), 2);
		КонецЕсли;
		
		СуммаДляПогашения = СуммаДляПогашения - Сумма6212;
	КонецЕсли;
	
	//погашаем 62.1.1
	Если Макс(СКД6211, 0)<>0 Тогда
		Если СуммаДляПогашения<СКД6211 Тогда
			Сумма6211 = СуммаДляПогашения;
		Иначе
			Сумма6211 = СКД6211;
		КонецЕсли;
		
		СуммаДляПогашения = СуммаДляПогашения - Сумма6211;
	КонецЕсли;

	Форма.Текст.Заголовок("    Долг 62.1.2: "+Формат(СКД6212, "Ч012.2") + "
						  |         62.1.1: "+Формат(СКД6211, "Ч012.2") + "
						  |Погашаем 62.1.2: "+Формат(Сумма6212-НП6212, "Ч012.2") + "
						  |            НП : "+Формат(НП6212, "Ч012.2") + "
						  |Погашаем 62.1.1: "+Формат(Сумма6211, "Ч012.2") + "
						  |  За инкассацию: "+Формат(СуммаИнкассации, "Ч012.2") + "
						  |     в т.ч. НДС: "+Формат(НДСИнкассации, "Ч012.2") + "
						  |             НП: "+Формат(НПИнкассации, "Ч012.2")+"
						  |          Аванс: "+Формат(СуммаДляПогашения, "Ч012.2"));
	
КонецПроцедуры//Расчет()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога: кнопка <<
//	Рассчитывает сумму, которую необходимо внести, чтобы погасить долг
//---------------------------
Процедура РассчитатьДолг()
	//определим сальдо на счетах
	Если КоррСчет = Сч621 Тогда
		СКД6211 = БИ62.СКД(Сч6211, "С",  , Субконто1, Субконто2, Субконто3);
		СКД6212 = БИ62.СКД(Сч6212, "С",  , Субконто1, Субконто2 ,Субконто3);
	ИначеЕсли КоррСчет = Сч6211 Тогда
		СКД6211 = БИ62.СКД(Сч6211, "С",  , Субконто1, Субконто2, Субконто3);
		СКД6212 = 0;
	ИначеЕсли КоррСчет = Сч6212 Тогда
		СКД6211 = 0;
		СКД6212 = БИ62.СКД(Сч6212, "С",  , Субконто1, Субконто2 ,Субконто3);
	КонецЕсли;
	
	Сумма6211 = 0; Сумма6212 = 0; НП6212 = 0;
	
	//погашаем сначала счет 62.1.2
	Если Макс(СКД6212, 0)<>0 Тогда
		Сумма6212 = Окр(СКД6212*(100+Константа.ОсновнаяСтавкаНП.Ставка)/100, 2);//сумма с НП
		НП6212 = Сумма6212 - СКД6212;
	КонецЕсли;
	
	//погашаем 62.1.1
	Если Макс(СКД6211, 0)<>0 Тогда
		Сумма6211 = СКД6211;
	КонецЕсли;
	
	//определим нужно ли взимать инкассацию с клиента
	ВзиматьИнкассацию = 0;
	Если ПустоеЗначение(Субконто2) = 0 Тогда
		ВзиматьИнкассацию = Субконто2.ВзиматьИнкассацию;
	КонецЕсли;
	
	Если ВзиматьИнкассацию = 1 Тогда
		//нужно
		СтавкаНДСИнк = Константа.Инкассация.СтавкаНДС.Получить(ДатаДок).Ставка;
		Если Субконто1.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
			СтавкаНПИнк = Константа.Инкассация.СтавкаНП.Получить(ДатаДок).Ставка;
		Иначе
			СтавкаНПИнк = 0;
		КонецЕсли;
		СборЗаИнкассацию = Константа.СборЗаИнкассацию;
		
		СуммаИнкассации = Окр((Сумма6211 + Сумма6212)*СборЗаИнкассацию/100, 2);
		НДСИнкассации = Окр(СуммаИнкассации*СтавкаНДСИнк/100, 2);
		НПИнкассации = Окр((СуммаИнкассации + НДСИнкассации)*СтавкаНПИнк/100, 2);
		СуммаИнкассации = СуммаИнкассации + НДСИнкассации + НПИнкассации;
	Иначе
		//не нужно взимать
		СуммаИнкассации = 0; НДСИнкассации = 0; НПИнкассации = 0;
	КонецЕсли;//ВзиматьИнкассацию = 1
	
	Форма.Текст.Заголовок("    Долг 62.1.2: "+Формат(СКД6212, "Ч012.2") + "
						  |         62.1.1: "+Формат(СКД6211, "Ч012.2") + "
						  |Погашаем 62.1.2: "+Формат(Сумма6212-НП6212, "Ч012.2") + "
						  |            НП : "+Формат(НП6212, "Ч012.2") + "
						  |Погашаем 62.1.1: "+Формат(Сумма6211, "Ч012.2") + "
						  |  За инкассацию: "+Формат(СуммаИнкассации, "Ч012.2") + "
						  |     в т.ч. НДС: "+Формат(НДСИнкассации, "Ч012.2") + "
						  |             НП: "+Формат(НПИнкассации, "Ч012.2")+"
						  |          Аванс: "+Формат(0, "Ч012.2"));
						  
	Сумма = Сумма6211 + Сумма6212 + СуммаИнкассации;
КонецПроцедуры//РассчитатьДолг()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Формирует представление субконто.
// ПАРАМЕТРЫ:
//	НомерСубконто - Число.
// ВОЗВРАЩАЕТ:
//	Строка - представление вида субконто.
//---------------------------
Функция ПредставлениеСубконто(НомерСубконто)
	Если ТипЗначения(ПолучитьАтрибут("Субконто" + НомерСубконто)) = 0 Тогда
		Возврат "";
	Иначе
		Возврат ПолучитьАтрибут("Субконто" + НомерСубконто).ПредставлениеВида();
	КонецЕсли;
КонецФункции//ПредставлениеСубконто()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Назначает тип субконто
//---------------------------
Процедура НазначитьТипыСубконто()
	НазначитьТип("Субконто1", КоррСчет.ВидСубконто(1));
	НазначитьТип("Субконто2", КоррСчет.ВидСубконто(2));
	НазначитьТип("Субконто3", КоррСчет.ВидСубконто(3));
КонецПроцедуры//НазначитьТипыСубконто()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Проверяется соотвествие контрагента и договора, указанного в аналитике.
//	Вызывается из формул элементов диалога: Субконто1, Субконто2, Субконто3.
// ПАРАМЕТРЫ:
//	ТекЭлемент - Строка. Идентификатор элемента.
//---------------------------
Процедура ПриВыбореСубконто(ТекЭлемент = "")
	ИдентификаторРеквизита = ?(ТекЭлемент = "", Форма.АктивныйЭлемент(), ТекЭлемент);
	ЗначениеРеквизита = ПолучитьАтрибут(ИдентификаторРеквизита);
	НомерСубконто = Число(Прав(ИдентификаторРеквизита, 1));
	Активность=0;
	Если ТипЗначенияСтр(ЗначениеРеквизита) = "Справочник" Тогда
		Если ЗначениеРеквизита.Вид() = "Контрагенты" Тогда
			Попытка
				Активность=ЗначениеРеквизита.НеАктивный;
			Исключение
			КонецПопытки;
			
			Если Активность = 1 Тогда
				Предупреждение("С данным контрагентом не работаем!", 10);
				ЗначениеРеквизита = "";
			    Субконто1=ПолучитьПустоеЗначение();
				Возврат;
			КонецЕсли;
			Если НомерСубконто < 3 Тогда
				ИдентификаторСледующегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто + 1);
				ЗначениеСледующегоРеквизита = ПолучитьАтрибут(ИдентификаторСледующегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеСледующегоРеквизита) = "Справочник" Тогда
					Если ЗначениеСледующегоРеквизита.Вид() = "Договоры" Тогда
						Если ЗначениеРеквизита <> ЗначениеСледующегоРеквизита.Владелец Тогда
						    УстановитьАтрибут(ИдентификаторСледующегоРеквизита, ЗначениеРеквизита.ОсновнойДоговор);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НомерСубконто = 1 Тогда
			    ПринятоОт = глПолноеНаименование(ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизита.Вид() = "Договоры" Тогда
			Если (ПустоеЗначение(ЗначениеРеквизита) = 0) и (НомерСубконто > 1) Тогда
				ИдентификаторПредыдущегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто - 1);
				ЗначениеПредыдущегоРеквизита = ПолучитьАтрибут(ИдентификаторПредыдущегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеПредыдущегоРеквизита) = "Справочник" Тогда
					Если ЗначениеПредыдущегоРеквизита.Вид() = "Контрагенты" Тогда
						Если ЗначениеРеквизита.Владелец <> ЗначениеПредыдущегоРеквизита Тогда
						    УстановитьАтрибут(ИдентификаторПредыдущегоРеквизита, ЗначениеРеквизита.Владелец);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (ЗначениеРеквизита.Наименование = глИмяДоговораДляПлатежейБезДоговора) и 
				 (КоррСчет <> СчетПоКоду("62.2")) и (КоррСчет <> СчетПоКоду("62.22")) Тогда
				Предупреждение("Служебный договор ""Без договора..."" можно использовать
							   |только при явно указанном счете учета выданных авансов.
							   |Укажите другой договор.");
				УстановитьАтрибут(ИдентификаторРеквизита, "");
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизита.Вид() = "Сотрудники" Тогда
			Если НомерСубконто = 1 Тогда
			    ПринятоОт = глПолноеНаименование(ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
КонецПроцедуры//ПриВыбореСубконто()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле ДвижениеДенежныхСредств.
//---------------------------
Процедура ПриВыбореКоррСчета()
	КоррСчет = СписокСубсчетов.ПолучитьЗначение(СписокСубсчетов.ТекущаяСтрока());
	
	НазначитьТипыСубконто();
	
	ПриВыбореСубконто("Субконто1");
	ПриВыбореСубконто("Субконто2");
	ПриВыбореСубконто("Субконто3");
КонецПроцедуры//ПриВыбореКоррСчета()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле Касса.
//---------------------------
Процедура ПриВыбореКассы()
	Если ПустоеЗначение(Касса) = 0 Тогда
		Если Выбран() = 0 Тогда
		    УстановитьНовыйНомер(Строка(Касса.Код));
			
		ИначеЕсли ТекущаяКасса <> Касса Тогда
		    УстановитьНовыйНомер(Строка(Касса.Код));
			ТекущаяКасса = Касса;
		Иначе
			НомерДок = НачальныйНомер;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры//ПриВыбореКассы()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ВводНового(ПризнКопирования, ОбъектКопирования)
	Кассир = глПользователь;
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если ПризнКопирования = 1 Тогда //копирование документа
		СчетФактура = "";
		Субконто1 = ПолучитьПустоеЗначение();
		Субконто2 = ПолучитьПустоеЗначение();
		Субконто3 = ПолучитьПустоеЗначение();
		
		ПринятоОт = "";
		Сумма = 0;
		
		ПриВыбореКассы();
	Иначе
		ДвижениеДенежныхСредств = Константа.ДвижениеДенежныхСредствДляПКО;
		Основание = "За хлебобулочные изделия";
	КонецЕсли;
	
	КоррСчет = Сч621;
	НазначитьТипыСубконто();
КонецПроцедуры//ВводНового

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ВводНаОсновании(ДокОсн)
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Комментарий = "Введен на основании: "+глПредставлениеДокумента(ДокОсн);
КонецПроцедуры // ВводНаОсновании()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриОткрытии()
	
	ДатаКон = ДатаДок;
	ДатаНач = ДатаДок - 30;
	КудаОтправлятьЭлЧек.ДобавитьЗначение("Электронная почта");
	КудаОтправлятьЭлЧек.ДобавитьЗначение("СМС");
	КудаОтправлятьЭлЧек.ТекущаяСтрока(1); 
	
	ТипОплаты.ДобавитьЗначение("Наличные"); 
	ТипОплаты.ДобавитьЗначение("Эквайринг");
	ТипОплаты.ТекущаяСтрока(1);
	
	
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение(1, "Кассовый чек"); 
	Форма.Закладки.ДобавитьЗначение(2, "Документы");
	
	Форма.ИспользоватьСлой("Шапка, Общий");

	Если Проведен() = 1 Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	ТекущаяКасса = Касса;
	НачальныйНомер = НомерДок;
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнСохранить.Доступность(0);
		Форма.КнРассчитатьДолг.Доступность(0);
	КонецЕсли;
	
	НачальнаяДатаДокумента = ДатаДок;
	СписокСубсчетов.ТекущаяСтрока(СписокСубсчетов.НайтиЗначение(КоррСчет));
	
	РассчитатьБИ62();
	Расчет();
КонецПроцедуры//ПриОткрытии 
//******************************************************************************
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки = 1 Тогда
		Форма.ИспользоватьСлой("Шапка, Общий");
	ИначеЕсли НомерЗакладки = 2 Тогда 
		Форма.ИспользоватьСлой("Шапка, Документы");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьФорму()
	
	НаклНаСумму = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		Если (ПустоеЗначение(ОтгрузкаГП) = 0) И (ПустоеЗначение(СуммаОтгрузкаГП) = 1) Тогда

			СуммаОтгрузкаГП = ОтгрузкаГП.Итог("Всего");
			
			ДатаОтгрузкаГП  = ОтгрузкаГП.ДатаДок;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		НаклНаСумму = НаклНаСумму + СуммаОтгрузкаГП;
		
	КонецЦикла;
	
	Сумма = Итог("СуммаОтгрузкаГП");
	
	//Форма.Обновить();

КонецПроцедуры

Функция ПроверитьРеквизитыФормы()
	
	Если ЧекиПробитыККМ = 1 Тогда
		
		Предупреждение("Из этого документа чеки уже распечатывались!");
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ПустоеЗначение(Субконто1) = 1 Тогда
		
		Предупреждение("Укажите контрагента!");
		
		Возврат 0;
		
	КонецЕсли;
	
	Если Сумма = 0 Тогда
		
		Предупреждение("Сумма автоподбора не может быть ровна нулю!");
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ПустоеЗначение(Касса) = 1 Тогда
		
		Предупреждение("Выберите кассу!");
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ПустоеЗначение(Кассир) = 1 Тогда
		
		Предупреждение("Выберите кассира");
		
		Возврат 0;
		
	КонецЕсли;
		
КонецФункции

Процедура Подбор() 
	
	Если ПроверитьРеквизитыФормы() = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
		
	Если Проведен() = 0 Тогда
		
		УдалитьСтроки();
		
	КонецЕсли;
	
	СуммаАвтоподбора = Сумма;
	
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = 
	"
	|Период с ДатаНач по ДатаКон;
	|ОбрабатыватьДокументы Проведенные;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ДокОтгрузка = Документ.Отгрузка.ТекущийДокумент;
	|Контр = Документ.Отгрузка.Контрагент;
	|ЧекПробитККМ = Документ.Отгрузка.ЧекПробитККМ;
	|ОтгрузкаСумма = Документ.Отгрузка.Всего;
	|Функция ОтгСумма = Сумма(ОтгрузкаСумма);
	|Группировка ДокОтгрузка;
	|Группировка Контр Без Групп;
	|Условие(Контр = Субконто1.ТекущийЭлемент());
	|Условие(ЧекПробитККМ <> 1);
	|Без итогов;
	|"
	;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = СоздатьОбъект("ТаблицаЗначений");
	
	Запрос.Выгрузить(Выборка);
	
	Запрос = 0;
	
	НаклНаСумму = 0;
	
	Выборка.Сортировать("ОтгСумма");
	
	Выборка.ВыбратьСтроки();
	
	Пока Выборка.ПолучитьСтроку() = 1 Цикл
			
			СуммаПоНакладной = Выборка.ОтгСумма;
			
			Если ((НаклНаСумму + СуммаПоНакладной)  > СуммаАвтоподбора) Тогда
				
				Прервать
				
			КонецЕсли;
			
			НоваяСтрока();
			
			ОтгрузкаГП = Выборка.ДокОтгрузка;
			
			СуммаОтгрузкаГП = СуммаПоНакладной;
			
			ДатаОтгрузкаГП = Выборка.ДокОтгрузка.ДатаДок;
			
			НаклНаСумму = НаклНаСумму + СуммаПоНакладной;
		
	КонецЦикла;
	
	
	Сумма = Итог("СуммаОтгрузкаГП");
	
    СвободныйОстаток = СуммаАвтоподбора - Сумма;
	
КонецПроцедуры

Функция ПробитьЧекНаККМ(ДокОтгрузкаГП)
	
	Рез = 0;
	
	Если (ДокОтгрузкаГП.Проведен() = 0) ИЛИ (ДокОтгрузкаГП.ЧекПробитККМ = 1) ИЛИ (ПустоеЗначение(ДокОтгрузкаГП) = 1) Тогда
		
		Сообщить("Не удалось пробить чек по документу " + ДокОтгрузкаГП.НомерДок);
		
		Возврат Рез;
		
	КонецЕсли;
	
	
	СписокТоваров = СоздатьОбъект("ТаблицаЗначений");
	СписокТоваров.НоваяКолонка("ТовНаим"   , "Строка");
	СписокТоваров.НоваяКолонка("Цена"      , "Число");
	СписокТоваров.НоваяКолонка("Количество", "Число");
	СписокТоваров.НоваяКолонка("Сумма"	   , "Число");
	СписокТоваров.НоваяКолонка("СтавкаНДС" , "Строка");
	
	ДокОтгрузкаГП.ВыбратьСтроки();
	
	Пока ДокОтгрузкаГП.ПолучитьСтроку() = 1 Цикл
		
		Если (Найти(ДокОтгрузкаГП.Товар.Наименование,"Пакеты") <> 0) ИЛИ (ПустоеЗначение(ДокОтгрузкаГП.Цена) = 1) Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		СписокТоваров.НоваяСтрока();
		
		Если СокрЛП(ДокОтгрузкаГП.ВариантРасчетаНалогов.Наименование) = "НДС в сумме"  Тогда
			ФлагНДС = 0;
		ИначеЕсли СокрЛП(ДокОтгрузкаГП.ВариантРасчетаНалогов.Наименование) = "НДС сверху" Тогда
			ФлагНДС = 1;
		КонецЕсли;
		
		СписокТоваров.ТовНаим    = ДокОтгрузкаГП.Товар.Наименование;
		
		Если ПустоеЗначение(ДокОтгрузкаГП.Товар.Развес) = 0 Тогда
			
			Если ПустоеЗначение(ДокОтгрузкаГП.Количество) = 1 Тогда
				
				Количество = ДокОтгрузкаГП.КоличествоПлюс;
				
			ИначеЕсли ПустоеЗначение(ДокОтгрузкаГП.Количество) = 0 Тогда
				
				Количество = ДокОтгрузкаГП.Количество * ДокОтгрузкаГП.ЕдиницаИзмерения.Коэффициент + ДокОтгрузкаГП.КоличествоПлюс;
				
			КонецЕсли;
			
			СписокТоваров.Количество = Количество;
			
			СписокТоваров.Цена = ДокОтгрузкаГП.Товар.Развес * (ДокОтгрузкаГП.Цена/1000) + ФлагНДС*(ДокОтгрузкаГП.НДС/Количество);
			
		ИначеЕсли ПустоеЗначение(ДокОтгрузкаГП.Товар.Развес) = 1 Тогда
			
			Количество = ДокОтгрузкаГП.Количество * ДокОтгрузкаГП.ЕдиницаИзмерения.Коэффициент + ДокОтгрузкаГП.КоличествоПлюс;
			
			СписокТоваров.Количество = Количество;
			
			СписокТоваров.Цена = ДокОтгрузкаГП.Товар.Развес * (ДокОтгрузкаГП.Цена/1000) + ФлагНДС*(ДокОтгрузкаГП.НДС/Количество);

		КонецЕсли; 
		
		
		СписокТоваров.Сумма		 = ДокОтгрузкаГП.Всего;
		
		СтавкаНДС  = ДокОтгрузкаГП.Товар.СтавкаНДС.Получить(ДатаДок);
		
		Если СокрЛП(СтавкаНДС.Наименование) = "18%" Тогда
			СписокТоваров.СтавкаНДС = "18"
		ИначеЕсли СокрЛП(СтавкаНДС.Наименование) = "10%" Тогда
			СписокТоваров.СтавкаНДС = "10"
		ИначеЕсли СокрЛП(СтавкаНДС.Наименование) = "Без налога (НДС)" Тогда 
			СписокТоваров.СтавкаНДС = "none"
		КонецЕсли;
		
	КонецЦикла;
	
	
	ПризнВозврата =	0;
	
	Если ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Наличные" Тогда
		БезНал = 0;
	ИначеЕсли ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Эквайринг" Тогда
		БезНал = 1;
	КонецЕсли;
	
	СуммаЧека = ДокОтгрузкаГП.Итог("Всего");
    Получено = СуммаЧека;
	КассирФИО = ПолноеИмяПользователя();
	Если ОтправлятьЭлЧек = 1 Тогда
		Если ПустоеЗначение(КонтактКлиента) = 1 Тогда
			Если КудаОтправлятьЭлЧек.ТекущаяСтрока() = 1 Тогда
				Контакт = СокрЛП(Субконто1.ЭлПочта);
			ИначеЕсли КудаОтправлятьЭлЧек.ТекущаяСтрока() = 2 Тогда
				Контакт = СокрЛП(Субконто1.phone);
			КонецЕсли;
		Иначе
			Контакт = СокрЛП(КонтактКлиента);
		КонецЕсли;
	Иначе
		Контакт = "";
	КонецЕсли;
	
    ТекстВЧеке = СоздатьОбъект("СписокЗначений");
	ТекстВЧеке.Установить("Контрагент",Субконто1.ПолнНаименование);
	ТекстВЧеке.Установить("НомерОтгрузкаГП",ДокОтгрузкаГП.НомерДок);
	ТекстВЧеке.Установить("Водитель",Водитель.Сотрудник);
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Процесс"           , "печатать_чек");
	Параметры.Установить("СписокТоваров"     , СписокТоваров);
	Параметры.Установить("СуммаЧека"         , СуммаЧека);
	Параметры.Установить("Получено"          , Получено);
	Параметры.Установить("Возврат"           , ПризнВозврата);
	Параметры.Установить("КассирФИО" 		 , КассирФИО);
	Параметры.Установить("КонтактКлиента"    , Контакт);
	Параметры.Установить("БезНал"            , БезНал);
	Параметры.Установить("ТекстВЧеке"        , ТекстВЧеке);
		
	ОткрытьФормуМодально("Отчет", Параметры, КаталогИБ() + "ExtForms\ONLINE-54.ert");
	
	Если Параметры.Получить("Результат") = 1 Тогда
		
		ТекДок = СоздатьОбъект("Документ.Отгрузка");
		
		ТекДок.НайтиДокумент(ДокОтгрузкаГП);
		
		ДатаЗапретаРедактирования = Константа.ДатаЗапретаРедактирования;
		
		Константа.ДатаЗапретаРедактирования = ТекДок.ДатаДок - 1;
		
		ТекДок.СделатьНеПроведенным();
		
		ТекДок.ЧекПробитККМ = 1;
		
		ТекДок.Записать();
		
		ТекДок.Провести();
		
		Константа.ДатаЗапретаРедактирования = ДатаЗапретаРедактирования; 
		
		Рез = 1;
		
	ИначеЕсли Параметры.Получить("Результат") = 0 Тогда
		
		Рез = 0;
		
		Сообщить(Параметры.Получить("ОписаниеРезультата"));
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции //ПробитьЧекНаККМ()

Процедура ПриемАванса()
	
	КассирФИО = ПолноеИмяПользователя();
	
	Если ОтправлятьЭлЧек = 1 Тогда
		Если ПустоеЗначение(КонтактКлиента) = 1 Тогда
			Если КудаОтправлятьЭлЧек.ТекущаяСтрока() = 1 Тогда
				Контакт = СокрЛП(Субконто1.ЭлПочта);
			ИначеЕсли КудаОтправлятьЭлЧек.ТекущаяСтрока() = 2 Тогда
				Контакт = СокрЛП(Субконто1.phone);
			КонецЕсли;
		Иначе
			Контакт = СокрЛП(КонтактКлиента);
		КонецЕсли;
	Иначе
		Контакт = "";
	КонецЕсли;
	
	Если ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Наличные" Тогда
		БезНал = 0;
	ИначеЕсли ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Эквайринг" Тогда
		БезНал = 1;
	КонецЕсли;
	
	ТекстВЧеке = СоздатьОбъект("СписокЗначений");
	ТекстВЧеке.Установить("Контрагент",Субконто1.ПолнНаименование);
	
	КонтрагентАванс = Субконто1.ПолнНаименование;
	
	Авансом = СвободныйОстаток;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Процесс"          , "прием_аванса");
	Параметры.Установить("Авансом"          , Авансом);
	Параметры.Установить("КассирФИО" 		, КассирФИО);
	Параметры.Установить("КонтрагентАванс"  , КонтрагентАванс);
	Параметры.Установить("КонтактКлиента"   , Контакт);
	Параметры.Установить("БезНал"           , БезНал);
	Параметры.Установить("ТекстВЧеке"       , ТекстВЧеке);
		
	ОткрытьФормуМодально("Отчет", Параметры, КаталогИБ() + "ExtForms\ONLINE-54.ert");
	
КонецПроцедуры //ПриемАванса()

Процедура ПакетнаяПечатьЧековККМ()
	
	Если Константа.ФРЗанят = 1 Тогда
		Пока Константа.ФРЗанят = 1 Цикл
			Сообщить("Фискальный регистратор занят");
		КонецЦикла;
	КонецЕсли;
	
	Если ПроверитьРеквизитыФормы() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если КоличествоСтрок() = 0 Тогда
		
		Сообщить("В табличной части ноль документов!");
		
		Возврат;
		
	КонецЕсли;
	
	Успешно = 0;
	
	Константа.ФРЗанят = 1;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		Если ПустоеЗначение(ОтгрузкаГП) = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПробитьЧекНаККМ(ОтгрузкаГП) = 1 Тогда
			
			Сообщить("Пробит чек по документу " + ОтгрузкаГП);
			
			Успешно = Успешно + 1;
			
		Иначе
			
			Сообщить("Не удалось пробить чек по документу " + ОтгрузкаГП);
			
			УдалитьСтроку();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Аванс = 1 Тогда
		
		ПриемАванса(); 
		
	КонецЕсли;
	
	ОбновитьФорму();
	
	Если Успешно > 0 Тогда
		
		ЧекиПробитыККМ = 1;
		
		ПриЗаписиПерепроводить(0); 
		
		Записать();
		
		ПриЗаписиПерепроводить(1); 
		
		Провести();
		
	КонецЕсли;
	
	Константа.ФРЗанят = 0;
	
КонецПроцедуры //ПакетнаяПечатьЧековККМ()

//******************************************************************************
//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ОбработкаВыбораЗначения(ВыбЗнач, ИдентЭлемДиалога, ФлагСтандОбр)
	Если ИдентЭлемДиалога = "ПринятоОт" Тогда
		Если ВыбЗнач.Выбран() = 1 Тогда
		    ПринятоОт = глПолноеНаименование(ВыбЗнач);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры//ОбработкаВыбораЗначения()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриЗаписи()
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Операция.Содержание = "Поступл.в кассу: "+Основание;
	Операция.СуммаОперации = Сумма;
КонецПроцедуры//ПриЗаписи()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
Процедура ПриЗакрытии()
	глОткрытьЖурнал(Контекст, Новый);	
КонецПроцедуры//ПриЗакрытии()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Печать накладной на внутреннее перемещение
//---------------------------
Процедура Печать()
	ОткрытьФорму("Обработка.ПечатьДокументов",Контекст);
КонецПроцедуры//Печать()

//---------------------------
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");

Сч621 = СчетПоКоду("62.1");
Сч6211 = СчетПоКоду("62.1.1");
Сч6212 = СчетПоКоду("62.1.2");

СписокСубсчетов.ДобавитьЗначение(Сч621, "("+Сч621.Код+") "+ Сч621.Наименование);
СписокСубсчетов.ДобавитьЗначение(Сч6211, "("+Сч6211.Код+") "+ Сч6211.Наименование);
СписокСубсчетов.ДобавитьЗначение(Сч6212, "("+Сч6212.Код+") "+ Сч6212.Наименование);
//КОНЕЦ  -- Бурков 22.10.03