//НАЧАЛО -- 22.10.03
Перем Новый;
Перем СписокДействий;

Перем Сч621, Сч767;
Перем СКД621;
Перем БИ62;

Перем ТекущаяКасса, НачальныйНомер;

//---------------------------
// НАЗНАЧЕНИЕ:
//	Расчет временных итогов.
//---------------------------
Процедура РассчитатьБИ62()
	БИ62 = СоздатьОбъект("БухгалтерскиеИтоги");
	
	Если Выбран() = 1 Тогда
		БИ62.Рассчитать(, СформироватьПозициюДокумента(ТекущийДокумент(),-1), СписокСубсчетов);
	Иначе
		БИ62.Рассчитать(ДатаДок, ДатаДок, СписокСубсчетов);
	КонецЕсли;
КонецПроцедуры//РассчитатьБИ62()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Рассчитывает сумму для погашения долга
//---------------------------
Процедура Расчет()
	//определим сальдо на счетах
	Если КоррСчет = Сч621 Тогда
		Если ПустоеЗначение(Субконто3) = 1 Тогда
			СКД621 = БИ62.СКД(Сч621, "С",  , Субконто1, Субконто2);
		Иначе
			СКД621 = БИ62.СКД(Сч621, "С",  , Субконто1, Субконто2, Субконто3);
		КонецЕсли;
		
		//определим нужно ли взимать инкассацию с клиента
		ВзиматьИнкассацию = 0;
		Если ПустоеЗначение(Субконто2) = 0 Тогда
			ВзиматьИнкассацию = Субконто2.ВзиматьИнкассацию;
		КонецЕсли;
		
		Если ВзиматьИнкассацию = 1 Тогда
			//нужно
			СтавкаНДСИнк = Константа.Инкассация.СтавкаНДС.Получить(ДатаДок).Ставка;
			Если Субконто1.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
				СтавкаНПИнк = Константа.Инкассация.СтавкаНП.Получить(ДатаДок).Ставка;
			Иначе
				СтавкаНПИнк = 0;
			КонецЕсли;
			СборЗаИнкассацию = Константа.СборЗаИнкассацию;
			
			СуммаИнкассации = Окр(СборЗаИнкассацию/100*Сумма/(1+СборЗаИнкассацию/100*(1 + СтавкаНДСИнк/100 + СтавкаНПИнк/100 + СтавкаНДСИнк*СтавкаНПИнк/10000)), 2);
			НДСИнкассации = Окр(СуммаИнкассации*СтавкаНДСИнк/100, 2);
			НПИнкассации = Окр((СуммаИнкассации + НДСИнкассации)*СтавкаНПИнк/100, 2);
			СуммаИнкассации = СуммаИнкассации + НДСИнкассации + НПИнкассации;
			
			СуммаДляПогашения = Сумма - СуммаИнкассации;
		Иначе
			//не нужно взимать
			СуммаДляПогашения = Сумма;
			СуммаИнкассации = 0; НДСИнкассации = 0; НПИнкассации = 0;
		КонецЕсли;//ВзиматьИнкассацию = 1
	
		Сумма621 = 0;
			
		//погашаем 62.1
		Если Макс(СКД621, 0)<>0 Тогда
			Если СуммаДляПогашения<СКД621 Тогда
				Сумма621 = СуммаДляПогашения;
			Иначе
				Сумма621 = СКД621;
			КонецЕсли;
			
			СуммаДляПогашения = СуммаДляПогашения - Сумма621;
		КонецЕсли;
	
		Форма.Текст.Заголовок("    Долг 62.1: "+Формат(СКД621,	"Ч015.2") + "
							  |Погашаем 62.1: "+Формат(Сумма621,"Ч015.2") + "
							  |За инкассацию: "+Формат(СуммаИнкассации, "Ч015.2") + "
							  |   в т.ч. НДС: "+Формат(НДСИнкассации, "Ч015.2") + "
							  |        Аванс: "+Формат(СуммаДляПогашения, "Ч015.2"));
		
	Иначе
		Форма.Текст.Заголовок("");
	КонецЕсли;//КоррСчет = Сч621
КонецПроцедуры//Расчет()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога: кнопка <<
//	Рассчитывает сумму, которую необходимо внести, чтобы погасить долг
//---------------------------
Процедура РассчитатьДолг()
	Если КоррСчет = Сч621  Тогда
		//определим сальдо на счетах
		Если ПустоеЗначение(Субконто3) = 1 Тогда
			СКД621 = БИ62.СКД(Сч621, "С",  , Субконто1, Субконто2);
		Иначе
			СКД621 = БИ62.СКД(Сч621, "С",  , Субконто1, Субконто2, Субконто3);
		КонецЕсли;
		
		Сумма621 = 0;
		
		//погашаем 62.1
		Если Макс(СКД621, 0)<>0 Тогда
			Сумма621 = СКД621;
		КонецЕсли;
		
		//определим нужно ли взимать инкассацию с клиента
		ВзиматьИнкассацию = 0;
		Если ПустоеЗначение(Субконто2) = 0 Тогда
			ВзиматьИнкассацию = Субконто2.ВзиматьИнкассацию;
		КонецЕсли;
		
		Если ВзиматьИнкассацию = 1 Тогда
			//нужно
			СтавкаНДСИнк = Константа.Инкассация.СтавкаНДС.Получить(ДатаДок).Ставка;
			Если Субконто1.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо Тогда
				СтавкаНПИнк = Константа.Инкассация.СтавкаНП.Получить(ДатаДок).Ставка;
			Иначе
				СтавкаНПИнк = 0;
			КонецЕсли;
			СборЗаИнкассацию = Константа.СборЗаИнкассацию;
			
			СуммаИнкассации = Окр(Сумма621*СборЗаИнкассацию/100, 2);
			НДСИнкассации = Окр(СуммаИнкассации*СтавкаНДСИнк/100, 2);
			НПИнкассации = Окр((СуммаИнкассации + НДСИнкассации)*СтавкаНПИнк/100, 2);
			СуммаИнкассации = СуммаИнкассации + НДСИнкассации + НПИнкассации;
		Иначе
			//не нужно взимать
			СуммаИнкассации = 0; НДСИнкассации = 0; НПИнкассации = 0;
		КонецЕсли;//ВзиматьИнкассацию = 1
		
		Форма.Текст.Заголовок("    Долг 62.1: "+Формат(СКД621,	"Ч015.2") + "
							  |Погашаем 62.1: "+Формат(Сумма621,"Ч015.2") + "
							  |За инкассацию: "+Формат(СуммаИнкассации, "Ч015.2") + "
							  |   в т.ч. НДС: "+Формат(НДСИнкассации, "Ч015.2") + "
							  |        Аванс: "+Формат(0, "Ч015.2"));
							  
		Сумма = Сумма621 + СуммаИнкассации;
	Иначе
		Форма.Текст.Заголовок("");
	КонецЕсли;
КонецПроцедуры//РассчитатьДолг()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Формирует представление субконто.
// ПАРАМЕТРЫ:
//	НомерСубконто - Число.
// ВОЗВРАЩАЕТ:
//	Строка - представление вида субконто.
//---------------------------
Функция ПредставлениеСубконто(НомерСубконто)
	Если ТипЗначения(ПолучитьАтрибут("Субконто" + НомерСубконто)) = 0 Тогда
		Возврат "";
	Иначе
		Возврат ПолучитьАтрибут("Субконто" + НомерСубконто).ПредставлениеВида();
	КонецЕсли;
КонецФункции//ПредставлениеСубконто()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Назначает тип субконто
//---------------------------
Процедура НазначитьТипыСубконто()
	НазначитьТип("Субконто1", КоррСчет.ВидСубконто(1));
	НазначитьТип("Субконто2", КоррСчет.ВидСубконто(2));
	НазначитьТип("Субконто3", КоррСчет.ВидСубконто(3));
КонецПроцедуры//НазначитьТипыСубконто()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Проверяется соотвествие контрагента и договора, указанного в аналитике.
//	Вызывается из формул элементов диалога: Субконто1, Субконто2, Субконто3.
// ПАРАМЕТРЫ:
//	ТекЭлемент - Строка. Идентификатор элемента.
//---------------------------
Процедура ПриВыбореСубконто(ТекЭлемент = "")
	ИдентификаторРеквизита = ?(ТекЭлемент = "", Форма.АктивныйЭлемент(), ТекЭлемент);
	ЗначениеРеквизита = ПолучитьАтрибут(ИдентификаторРеквизита);
	НомерСубконто = Число(Прав(ИдентификаторРеквизита, 1));
	Если ТипЗначенияСтр(ЗначениеРеквизита) = "Справочник" Тогда
		Если ЗначениеРеквизита.Вид() = "Контрагенты" Тогда
			Если НомерСубконто < 3 Тогда
				ИдентификаторСледующегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто + 1);
				ЗначениеСледующегоРеквизита = ПолучитьАтрибут(ИдентификаторСледующегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеСледующегоРеквизита) = "Справочник" Тогда
					Если ЗначениеСледующегоРеквизита.Вид() = "Договоры" Тогда
						Если ЗначениеРеквизита <> ЗначениеСледующегоРеквизита.Владелец Тогда
						    УстановитьАтрибут(ИдентификаторСледующегоРеквизита, ЗначениеРеквизита.ОсновнойДоговор);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НомерСубконто = 1 Тогда
			    ПринятоОт = глПолноеНаименование(ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизита.Вид() = "Договоры" Тогда
			Если (ПустоеЗначение(ЗначениеРеквизита) = 0) и (НомерСубконто > 1) Тогда
				ИдентификаторПредыдущегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто - 1);
				ЗначениеПредыдущегоРеквизита = ПолучитьАтрибут(ИдентификаторПредыдущегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеПредыдущегоРеквизита) = "Справочник" Тогда
					Если ЗначениеПредыдущегоРеквизита.Вид() = "Контрагенты" Тогда
						Если ЗначениеРеквизита.Владелец <> ЗначениеПредыдущегоРеквизита Тогда
						    УстановитьАтрибут(ИдентификаторПредыдущегоРеквизита, ЗначениеРеквизита.Владелец);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если (ЗначениеРеквизита.Наименование = глИмяДоговораДляПлатежейБезДоговора) и 
				 (КоррСчет <> СчетПоКоду("62.2")) и (КоррСчет <> СчетПоКоду("62.22")) Тогда
				Предупреждение("Служебный договор ""Без договора..."" можно использовать
							   |только при явно указанном счете учета выданных авансов.
							   |Укажите другой договор.");
				УстановитьАтрибут(ИдентификаторРеквизита, "");
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизита.Вид() = "Сотрудники" Тогда
			Если НомерСубконто = 1 Тогда
			    ПринятоОт = глПолноеНаименование(ЗначениеРеквизита);
			КонецЕсли;
		ИначеЕсли ЗначениеРеквизита.Вид() = "МестаХранения" Тогда
		    ПринятоОт = глПолноеНаименование(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Расчет();
КонецПроцедуры//ПриВыбореСубконто()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле ДвижениеДенежныхСредств.
//---------------------------
Процедура ПриВыбореКоррСчета()
	КоррСчет = СписокСубсчетов.ПолучитьЗначение(СписокСубсчетов.ТекущаяСтрока());
	
	НазначитьТипыСубконто();
	
	ПриВыбореСубконто("Субконто1");
	ПриВыбореСубконто("Субконто2");
	ПриВыбореСубконто("Субконто3");
КонецПроцедуры//ПриВыбореКоррСчета()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле Касса.
//---------------------------
Процедура ПриВыбореКассы()
	Если ПустоеЗначение(Касса) = 0 Тогда
		ДокZ = СоздатьОбъект("Документ.ZОтчет");
		ДокZ.Новый();
		ДокZ.УстановитьНовыйНомер(Строка(Касса.Код)+"-");
		НомерZОтчета = ДокZ.НомерДок;
		
		Если Выбран() = 0 Тогда
		    УстановитьНовыйНомер(Строка(НомерZОтчета)+"-");
			
		ИначеЕсли ТекущаяКасса <> Касса Тогда
		    УстановитьНовыйНомер(Строка(НомерZОтчета)+"-");
			ТекущаяКасса = Касса;
		Иначе
			НомерДок = НачальныйНомер;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры//ПриВыбореКассы()

//---------------------------
// НАЗНАЧЕНИЕ:
//
//---------------------------
Процедура ПриИзмененииДаты()
	РассчитатьБИ62();
	ПриВыбореКассы();
КонецПроцедуры//ПриИзмененииДаты()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	Если (ЭлементДиалога = "Субконто1") И (КоррСчет = Сч767) Тогда
		СЗ = СоздатьОбъект("СписокЗначений");
		СпрМХ = СоздатьОбъект("Справочник.МестаХранения");
		СпрМХ.ВыбратьЭлементы();
		Пока СпрМХ.ПолучитьЭлемент() = 1 Цикл
			Если (СпрМХ.ТипСклада = Перечисление.ТипыМестХранения.Выездной) ИЛИ (СпрМХ.ТипСклада = Перечисление.ТипыМестХранения.Розничный) Тогда
				СЗ.ДобавитьЗначение(СпрМХ.ТекущийЭлемент());	
			КонецЕсли;
		КонецЦикла;
		
		ОтборПоРеквизиту.ДобавитьЗначение(СЗ);
		
	ИначеЕсли (ЭлементДиалога = "Комментарий") И (КоррСчет = Сч767) Тогда	
		Спр = СоздатьОбъект("Справочник.Водители");
		Если Спр.Выбрать(,) = 1 Тогда
			Комментарий = СокрЛП(Спр.Сотрудник.Наименование);
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "Сотрудник" Тогда
		СЗ = СоздатьОбъект("СписокЗначений");
		Спр = СоздатьОбъект("Справочник.Водители");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			СЗ.ДобавитьЗначение(Спр.Сотрудник);
		КонецЦикла;
		ОтборПоРеквизиту.ДобавитьЗначение(СЗ);
		
	КонецЕсли;
КонецПроцедуры//ПриНачалеВыбораЗначения()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ВводНового(ПризнКопирования, ОбъектКопирования)
	Новый = 1;
	Если ПризнКопирования = 1 Тогда //копирование документа
		СчетФактура = "";
		
		Субконто1 = ПолучитьПустоеЗначение();
		Субконто2 = ПолучитьПустоеЗначение();
		//Субконто3 = Перечисление.ВидыРасчетовСПокупателями.РасчетыЗаПродукцию;
		
		ПринятоОт = "";
		Сумма = 0;
		
		ПриВыбореКассы();
	Иначе
		ДвижениеДенежныхСредств = Константа.ВидДвиженияПоступлениеОтПокупателей;
		Основание = "За хлебобулочные изделия";

		КоррСчет = Сч621;
		НазначитьТипыСубконто();

		//Субконто3 = Перечисление.ВидыРасчетовСПокупателями.РасчетыЗаПродукцию;
	КонецЕсли;
	
	Автор = глПользователь;
КонецПроцедуры//ВводНового

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ВводНаОсновании(ДокОсн)
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Комментарий = "Введен на основании: "+глПредставлениеДокумента(ДокОсн);
	Автор = глПользователь;
КонецПроцедуры//ВводНаОсновании()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриОткрытии()
	Если Проведен() = 1 Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	ТекущаяКасса = Касса;
	НачальныйНомер = НомерДок;
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнСохранить.Доступность(0);
		Форма.КнРассчитатьДолг.Доступность(0);
	КонецЕсли;
	
	СписокСубсчетов.ТекущаяСтрока(СписокСубсчетов.НайтиЗначение(КоррСчет));
	
	Если КоррСчет = Сч621  Тогда
		РассчитатьБИ62();
	КонецЕсли;
	Расчет();
КонецПроцедуры//ПриОткрытии  

//Рустам 12092017 
//Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
//	
//	Если НомерЗакладки = 1 Тогда
//		Форма.ИспользоватьСлой("Шапка, Общий");
//	ИначеЕсли НомерЗакладки = 2 Тогда 
//		Форма.ИспользоватьСлой("Шапка, Документы");
//	КонецЕсли;
//	
//КонецПроцедуры
//
//Процедура ОбновитьФорму()
//	
//	НаклНаСумму = 0;
//	
//	ВыбратьСтроки();
//	
//	Пока ПолучитьСтроку() = 1 Цикл
//		
//		Если (ПустоеЗначение(ОтгрузкаГП) = 0) И (ПустоеЗначение(СуммаОтгрузкаГП) = 1) Тогда
//
//			СуммаОтгрузкаГП = ОтгрузкаГП.Итог("Всего");
//			
//			ДатаОтгрузкаГП  = ОтгрузкаГП.ДатаДок;
//			
//		КонецЕсли;	
//		
//	КонецЦикла;
//	
//	ВыбратьСтроки();
//	
//	Пока ПолучитьСтроку() = 1 Цикл
//		
//		НаклНаСумму = НаклНаСумму + СуммаОтгрузкаГП;
//		
//	КонецЦикла;
//	
//	Сумма = Итог("СуммаОтгрузкаГП");
//	
//	//Форма.Обновить();
//
//КонецПроцедуры
//
//Функция ПроверитьРеквизитыФормы()
//	
//	Если ЧекиПробитыККМ = 1 Тогда
//		
//		Предупреждение("Из этого документа чеки уже распечатывались!");
//		
//		Возврат 0;
//		
//	КонецЕсли;
//	
//	Если ПустоеЗначение(Субконто1) = 1 Тогда
//		
//		Предупреждение("Укажите контрагента!");
//		
//		Возврат 0;
//		
//	КонецЕсли;
//	
//	Если Сумма = 0 Тогда
//		
//		Предупреждение("Сумма автоподбора не может быть ровна нулю!");
//		
//		Возврат 0;
//		
//	КонецЕсли;
//	
//	Если ПустоеЗначение(Касса) = 1 Тогда
//		
//		Предупреждение("Выберите кассу!");
//		
//		Возврат 0;
//		
//	КонецЕсли;
//	
//	Если ПустоеЗначение(Кассир) = 1 Тогда
//		
//		Предупреждение("Выберите кассира");
//		
//		Возврат 0;
//		
//	КонецЕсли;
//		
//КонецФункции
//
//Процедура Подбор() 
//	
//	Если ПроверитьРеквизитыФормы() = 0 Тогда 
//		
//		Возврат;
//		
//	КонецЕсли;
//		
//	Если Проведен() = 0 Тогда
//		
//		УдалитьСтроки();
//		
//	КонецЕсли;
//	
//	СуммаАвтоподбора = Сумма;
//	
//	Запрос = СоздатьОбъект("Запрос");
//	
//	ТекстЗапроса = 
//	"
//	|Период с ДатаНач по ДатаКон;
//	|ОбрабатыватьДокументы Проведенные;
//	|Обрабатывать НеПомеченныеНаУдаление;
//	|ДокОтгрузка = Документ.Отгрузка.ТекущийДокумент;
//	|Контр = Документ.Отгрузка.Контрагент;
//	|ЧекПробитККМ = Документ.Отгрузка.ЧекПробитККМ;
//	|ОтгрузкаСумма = Документ.Отгрузка.Всего;
//	|Функция ОтгСумма = Сумма(ОтгрузкаСумма);
//	|Группировка ДокОтгрузка;
//	|Группировка Контр Без Групп;
//	|Условие(Контр = Субконто1.ТекущийЭлемент());
//	|Условие(ЧекПробитККМ <> 1);
//	|Без итогов;
//	|"
//	;
//	
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда 
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	Выборка = СоздатьОбъект("ТаблицаЗначений");
//	
//	Запрос.Выгрузить(Выборка);
//	
//	Запрос = 0;
//	
//	НаклНаСумму = 0;
//	
//	Выборка.Сортировать("ОтгСумма");
//	
//	Выборка.ВыбратьСтроки();
//	
//	Пока Выборка.ПолучитьСтроку() = 1 Цикл
//			
//			СуммаПоНакладной = Выборка.ОтгСумма;
//			
//			Если ((НаклНаСумму + СуммаПоНакладной)  > СуммаАвтоподбора) Тогда
//				
//				Прервать
//				
//			КонецЕсли;
//			
//			НоваяСтрока();
//			
//			ОтгрузкаГП = Выборка.ДокОтгрузка;
//			
//			СуммаОтгрузкаГП = СуммаПоНакладной;
//			
//			ДатаОтгрузкаГП = Выборка.ДокОтгрузка.ДатаДок;
//			
//			НаклНаСумму = НаклНаСумму + СуммаПоНакладной;
//		
//	КонецЦикла;
//	
//	
//	Сумма = Итог("СуммаОтгрузкаГП");
//	
//    СвободныйОстаток = СуммаАвтоподбора - Сумма;
//	
//КонецПроцедуры
//
//Функция ПробитьЧекНаККМ(ДокОтгрузкаГП)
//	
//	Рез = 0;
//	
//	Если (ДокОтгрузкаГП.Проведен() = 0) ИЛИ (ДокОтгрузкаГП.ЧекПробитККМ = 1) ИЛИ (ПустоеЗначение(ДокОтгрузкаГП) = 1) Тогда
//		
//		Сообщить("Не удалось пробить чек по документу " + ДокОтгрузкаГП.НомерДок);
//		
//		Возврат Рез;
//		
//	КонецЕсли;
//	
//	
//	СписокТоваров = СоздатьОбъект("ТаблицаЗначений");
//	СписокТоваров.НоваяКолонка("ТовНаим"   , "Строка");
//	СписокТоваров.НоваяКолонка("Цена"      , "Число");
//	СписокТоваров.НоваяКолонка("Количество", "Число");
//	СписокТоваров.НоваяКолонка("Сумма"	   , "Число");
//	СписокТоваров.НоваяКолонка("СтавкаНДС" , "Строка");
//	
//	ДокОтгрузкаГП.ВыбратьСтроки();
//	
//	Пока ДокОтгрузкаГП.ПолучитьСтроку() = 1 Цикл
//		
//		Если (Найти(ДокОтгрузкаГП.Товар.Наименование,"Пакеты") <> 0) ИЛИ (ПустоеЗначение(ДокОтгрузкаГП.Цена) = 1) Тогда 
//			
//			Продолжить;
//			
//		КонецЕсли;
//		
//		СписокТоваров.НоваяСтрока();
//		
//		Если СокрЛП(ДокОтгрузкаГП.ВариантРасчетаНалогов.Наименование) = "НДС в сумме"  Тогда
//			ФлагНДС = 0;
//		ИначеЕсли СокрЛП(ДокОтгрузкаГП.ВариантРасчетаНалогов.Наименование) = "НДС сверху" Тогда
//			ФлагНДС = 1;
//		КонецЕсли;
//		
//		СписокТоваров.ТовНаим    = ДокОтгрузкаГП.Товар.Наименование;
//		
//		Если ПустоеЗначение(ДокОтгрузкаГП.Товар.Развес) = 0 Тогда
//			
//			Если ПустоеЗначение(ДокОтгрузкаГП.Количество) = 1 Тогда
//				
//				Количество = ДокОтгрузкаГП.КоличествоПлюс;
//				
//			ИначеЕсли ПустоеЗначение(ДокОтгрузкаГП.Количество) = 0 Тогда
//				
//				Количество = ДокОтгрузкаГП.Количество * ДокОтгрузкаГП.ЕдиницаИзмерения.Коэффициент + ДокОтгрузкаГП.КоличествоПлюс;
//				
//			КонецЕсли;
//			
//			СписокТоваров.Количество = Количество;
//			
//			СписокТоваров.Цена = ДокОтгрузкаГП.Товар.Развес * (ДокОтгрузкаГП.Цена/1000) + ФлагНДС*(ДокОтгрузкаГП.НДС/Количество);
//			
//		ИначеЕсли ПустоеЗначение(ДокОтгрузкаГП.Товар.Развес) = 1 Тогда
//			
//			Количество = ДокОтгрузкаГП.Количество * ДокОтгрузкаГП.ЕдиницаИзмерения.Коэффициент + ДокОтгрузкаГП.КоличествоПлюс;
//			
//			СписокТоваров.Количество = Количество;
//			
//			СписокТоваров.Цена = ДокОтгрузкаГП.Товар.Развес * (ДокОтгрузкаГП.Цена/1000) + ФлагНДС*(ДокОтгрузкаГП.НДС/Количество);
//
//		КонецЕсли; 
//		
//		
//		СписокТоваров.Сумма		 = ДокОтгрузкаГП.Всего;
//		
//		СтавкаНДС  = ДокОтгрузкаГП.Товар.СтавкаНДС.Получить(ДатаДок);
//		
//		Если СокрЛП(СтавкаНДС.Наименование) = "18%" Тогда
//			СписокТоваров.СтавкаНДС = "18"
//		ИначеЕсли СокрЛП(СтавкаНДС.Наименование) = "10%" Тогда
//			СписокТоваров.СтавкаНДС = "10"
//		ИначеЕсли СокрЛП(СтавкаНДС.Наименование) = "Без налога (НДС)" Тогда 
//			СписокТоваров.СтавкаНДС = "none"
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	
//	ПризнВозврата =	0;
//	
//	Если ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Наличные" Тогда
//		БезНал = 0;
//	ИначеЕсли ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Эквайринг" Тогда
//		БезНал = 1;
//	КонецЕсли;
//	
//	СуммаЧека = ДокОтгрузкаГП.Итог("Всего");
//    Получено = СуммаЧека;
//	КассирФИО = ПолноеИмяПользователя();
//	Если ОтправлятьЭлЧек = 1 Тогда
//		Если ПустоеЗначение(КонтактКлиента) = 1 Тогда
//			Если КудаОтправлятьЭлЧек.ТекущаяСтрока() = 1 Тогда
//				Контакт = СокрЛП(Субконто1.ЭлПочта);
//			ИначеЕсли КудаОтправлятьЭлЧек.ТекущаяСтрока() = 2 Тогда
//				Контакт = СокрЛП(Субконто1.phone);
//			КонецЕсли;
//		Иначе
//			Контакт = СокрЛП(КонтактКлиента);
//		КонецЕсли;
//	Иначе
//		Контакт = "";
//	КонецЕсли;
//	
//    ТекстВЧеке = СоздатьОбъект("СписокЗначений");
//	ТекстВЧеке.Установить("Контрагент",Субконто1.ПолнНаименование);
//	ТекстВЧеке.Установить("НомерОтгрузкаГП",ДокОтгрузкаГП.НомерДок);
//	ТекстВЧеке.Установить("Водитель",Водитель.Сотрудник);
//	
//	Параметры = СоздатьОбъект("СписокЗначений");
//	Параметры.Установить("Процесс"           , "печатать_чек");
//	Параметры.Установить("СписокТоваров"     , СписокТоваров);
//	Параметры.Установить("СуммаЧека"         , СуммаЧека);
//	Параметры.Установить("Получено"          , Получено);
//	Параметры.Установить("Возврат"           , ПризнВозврата);
//	Параметры.Установить("КассирФИО" 		 , КассирФИО);
//	Параметры.Установить("КонтактКлиента"    , Контакт);
//	Параметры.Установить("БезНал"            , БезНал);
//	Параметры.Установить("ТекстВЧеке"        , ТекстВЧеке);
//		
//	ОткрытьФормуМодально("Отчет", Параметры, КаталогИБ() + "ExtForms\ONLINE-54.ert");
//	
//	Если Параметры.Получить("Результат") = 1 Тогда
//		
//		ТекДок = СоздатьОбъект("Документ.Отгрузка");
//		
//		ТекДок.НайтиДокумент(ДокОтгрузкаГП);
//		
//		ДатаЗапретаРедактирования = Константа.ДатаЗапретаРедактирования;
//		
//		Константа.ДатаЗапретаРедактирования = ТекДок.ДатаДок - 1;
//		
//		ТекДок.СделатьНеПроведенным();
//		
//		ТекДок.ЧекПробитККМ = 1;
//		
//		ТекДок.Записать();
//		
//		ТекДок.Провести();
//		
//		Константа.ДатаЗапретаРедактирования = ДатаЗапретаРедактирования; 
//		
//		Рез = 1;
//		
//	ИначеЕсли Параметры.Получить("Результат") = 0 Тогда
//		
//		Рез = 0;
//		
//		Сообщить(Параметры.Получить("ОписаниеРезультата"));
//		
//	КонецЕсли;
//	
//	Возврат Рез;
//	
//КонецФункции //ПробитьЧекНаККМ()
//
//Процедура ПриемАванса()
//	
//	КассирФИО = ПолноеИмяПользователя();
//	
//	Если ОтправлятьЭлЧек = 1 Тогда
//		Если ПустоеЗначение(КонтактКлиента) = 1 Тогда
//			Если КудаОтправлятьЭлЧек.ТекущаяСтрока() = 1 Тогда
//				Контакт = СокрЛП(Субконто1.ЭлПочта);
//			ИначеЕсли КудаОтправлятьЭлЧек.ТекущаяСтрока() = 2 Тогда
//				Контакт = СокрЛП(Субконто1.phone);
//			КонецЕсли;
//		Иначе
//			Контакт = СокрЛП(КонтактКлиента);
//		КонецЕсли;
//	Иначе
//		Контакт = "";
//	КонецЕсли;
//	
//	Если ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Наличные" Тогда
//		БезНал = 0;
//	ИначеЕсли ТипОплаты.ПолучитьЗначение(ТипОплаты.ТекущаяСтрока()) = "Эквайринг" Тогда
//		БезНал = 1;
//	КонецЕсли;
//	
//	ТекстВЧеке = СоздатьОбъект("СписокЗначений");
//	ТекстВЧеке.Установить("Контрагент",Субконто1.ПолнНаименование);
//	
//	КонтрагентАванс = Субконто1.ПолнНаименование;
//	
//	Авансом = СвободныйОстаток;
//	
//	Параметры = СоздатьОбъект("СписокЗначений");
//	Параметры.Установить("Процесс"          , "прием_аванса");
//	Параметры.Установить("Авансом"          , Авансом);
//	Параметры.Установить("КассирФИО" 		, КассирФИО);
//	Параметры.Установить("КонтрагентАванс"  , КонтрагентАванс);
//	Параметры.Установить("КонтактКлиента"   , Контакт);
//	Параметры.Установить("БезНал"           , БезНал);
//	Параметры.Установить("ТекстВЧеке"       , ТекстВЧеке);
//		
//	ОткрытьФормуМодально("Отчет", Параметры, КаталогИБ() + "ExtForms\ONLINE-54.ert");
//	
//КонецПроцедуры //ПриемАванса()
//
//Процедура ПакетнаяПечатьЧековККМ()
//	
//	Если Константа.ФРЗанят = 1 Тогда
//		Пока Константа.ФРЗанят = 1 Цикл
//			Сообщить("Фискальный регистратор занят");
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если ПроверитьРеквизитыФормы() = 0 Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	Если КоличествоСтрок() = 0 Тогда
//		
//		Сообщить("В табличной части ноль документов!");
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	Успешно = 0;
//	
//	Константа.ФРЗанят = 1;
//	
//	ВыбратьСтроки();
//	
//	Пока ПолучитьСтроку() = 1 Цикл
//		
//		Если ПустоеЗначение(ОтгрузкаГП) = 1 Тогда
//			
//			Продолжить;
//			
//		КонецЕсли;
//		
//		Если ПробитьЧекНаККМ(ОтгрузкаГП) = 1 Тогда
//			
//			Сообщить("Пробит чек по документу " + ОтгрузкаГП);
//			
//			Успешно = Успешно + 1;
//			
//		Иначе
//			
//			Сообщить("Не удалось пробить чек по документу " + ОтгрузкаГП);
//			
//			УдалитьСтроку();
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если Аванс = 1 Тогда
//		
//		ПриемАванса(); 
//		
//	КонецЕсли;
//	
//	ОбновитьФорму();
//	
//	Если Успешно > 0 Тогда
//		
//		ЧекиПробитыККМ = 1;
//		
//		ПриЗаписиПерепроводить(0); 
//		
//		Записать();
//		
//		ПриЗаписиПерепроводить(1); 
//		
//		Провести();
//		
//	КонецЕсли;
//	
//	Константа.ФРЗанят = 0;
//	
//КонецПроцедуры //ПакетнаяПечатьЧековККМ()

//Рустам 12092017
//
Процедура ПриемАванса() 
	
	КассирФИО = ПолноеИмяПользователя();
	
	ТекстВЧеке = СоздатьОбъект("СписокЗначений");
	ТекстВЧеке.Установить("Контрагент",Субконто1.ПолнНаименование);
	
	КонтрагентАванс = Субконто1.ПолнНаименование;
	ОснованиеАванса = ДвижениеДенежныхСредств.Наименование;
	
	Авансом = Сумма;
	БезНал = 0;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Процесс"          , "прием_аванса");
	Параметры.Установить("Авансом"          , Авансом);
	Параметры.Установить("КассирФИО" 		, КассирФИО);
	Параметры.Установить("КонтрагентАванс"  , КонтрагентАванс);
	Параметры.Установить("ОснованиеАванса"        , ОснованиеАванса);
	//Параметры.Установить("КонтактКлиента"   , Контакт);
	Параметры.Установить("БезНал"           , БезНал);
	Параметры.Установить("ТекстВЧеке"       , ТекстВЧеке);
	
	ОткрытьФормуМодально("Отчет", Параметры, КаталогИБ() + "ExtForms\ONLINE-54.ert");
	
КонецПроцедуры
//

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриЗаписи()
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
    
	Если КоррСчет.Выбран() = 0 Тогда
		глСообщениеПроведения("Не указан корреспондирующий счет", ТекущийДокумент(), 1);
		СтатусВозврата(0);
	КонецЕсли;
    
	Для к = 1 По КоррСчет.КоличествоСубконто() Цикл
		Если КоррСчет.ВидСубконто(к).Идентификатор() = "ВидыРасчетовСПокупателями" Тогда
			Продолжить;	
		КонецЕсли;
		Если ПустоеЗначение(ПолучитьАтрибут("Субконто"+к)) = 1 Тогда
			глСообщениеПроведения("Не указано субконто """ + КоррСчет.ВидСубконто(к)+"""", ТекущийДокумент(), 1);
			СтатусВозврата(0);
		КонецЕсли;
	КонецЦикла;

	Если Касса.Выбран() = 0 Тогда
		глСообщениеПроведения("Не выбрана касса", ТекущийДокумент(), 1);
		СтатусВозврата(0);
	КонецЕсли;

	Если Кассир.Выбран() = 0 Тогда
		глСообщениеПроведения("Не выбран кассир", ТекущийДокумент(), 1);
		СтатусВозврата(0);
	КонецЕсли;
	
	Если СтатусВозврата() = 0 Тогда
		глНеПроводить(Контекст, "");
		Возврат;
	КонецЕсли;
	
	Операция.Содержание = "Поступл.в кассу: "+Основание;
	Операция.СуммаОперации = Сумма;
КонецПроцедуры//ПриЗаписи()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
Процедура ПриЗакрытии()
	глОткрытьЖурнал(Контекст, Новый, "Журнал.Чеки");	
КонецПроцедуры//ПриЗакрытии()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Печать накладной на внутреннее перемещение
//---------------------------
Процедура Печать()
	ОткрытьФорму("Обработка.ПечатьДокументов",Контекст);
КонецПроцедуры//Печать()

//---------------------------
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");

Сч621 = СчетПоКоду("62.1");
Сч767 = СчетПоКоду("76.7");
СписокСубсчетов.ДобавитьЗначение(Сч621, "("+Сч621.Код+") "+ Сч621.Наименование);
СписокСубсчетов.ДобавитьЗначение(Сч767, "("+Сч767.Код+") "+ Сч767.Наименование);
//КОНЕЦ  -- 25.05.05

НННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННННН
//НАЧАЛО -- 08.12.03
Перем СписокДействий;
Перем ТекущийДолг;
Перем Рейс;

Перем ТаблицаПечатныхФорм;
Перем ИдентификаторФормы;
Перем СписокКолонок;

Перем НачальнаяДатаДокумента;
Перем Новый;
Перем Модифицирован;

//---------------------------
// НАЗНАЧЕНИЕ:
//	Определяет номер пиктограммы для вывода в доп.колонку
// ВОЗВРАЩАЕТ:
//	Номер нужной пиктограммы
//---------------------------
Функция ПолучитьПиктограмму()
	Если Товар.Выбран() = 1 Тогда
		Если Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
			Возврат ?(НеУпакована = 0, 2, 1);
		Иначе	
			Возврат 0;
		КонецЕсли;
	Иначе	
		Возврат 0;
	КонецЕсли;
КонецФункции//ПолучитьПиктограмму()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле ДатаДок.
// ВОЗВРАЩАЕТ:
//	Количество продукции в единицах (Константа.ОсновнаяЕдиница)
//---------------------------
Функция ИтогКоличество()
	ИтогоКоличество = 0;
	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТЗ);
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Если ТЗ.Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
			Если Константа.ОсновнаяЕдиницаИзмерения = ТЗ.Товар.ЕдиницаИзмерения.ЕдиницаИзмерения Тогда
				ИтогоКоличество = ИтогоКоличество + ТЗ.ВсегоКоличество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтогоКоличество;
КонецФункции//ИтогКоличество()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога: кнопка "Услуги"
//---------------------------
Процедура ДобавитьУслуги()
	Если ПустоеЗначение(Константа.УслугиПриОтгрузкеПродукции) = 0 Тогда
		ТЗ = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(ТЗ,"Товар");
		
		СпрН = СоздатьОбъект("Справочник.Номенклатура");
		СпрН.ИспользоватьРодителя(Константа.УслугиПриОтгрузкеПродукции);
		СпрН.ВыбратьЭлементы();
		ВесПродукции = Итог("Вес");
		Пока СпрН.ПолучитьЭлемент()=1 Цикл
			Если ТЗ.НайтиЗначение(СпрН.ТекущийЭлемент(),0,"Товар") = 1 Тогда
				Продолжить;                   
			КонецЕсли;
			Если СпрН.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Материал  Тогда
				НоваяСтрока();
				Товар = СпрН.ТекущийЭлемент();
				Количество = 0;
				ЕдиницаИзмерения=Товар.ЕдиницаИзмерения;
			Иначе
				НоваяСтрока();
				Товар = СпрН.ТекущийЭлемент();
				Количество = ВесПродукции;
				ЕдиницаИзмерения=Товар.ЕдиницаИзмерения;
				глПересчет(Контекст,"Количество");
				Если Цена = 0 Тогда
					УдалитьСтроку();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Форма.Обновить(1);
	КонецЕсли;	
КонецПроцедуры//ДобавитьУслуги()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле ввода "ед."
// ВОЗВРАЩАЕТ:
//	Единицу измерния цены, для товара
//---------------------------
Функция ВернутьЕдиницуЦены()
	ЕдЦены = "";
	НайденнаяЦена = глВернутьТипЦены(Товар,ТипЦен,ДатаДок,ПолучитьПустоеЗначение("Справочник.Контрагенты"));
	Если ПустоеЗначение(НайденнаяЦена) = 0 Тогда
		ЕдЦены = НайденнаяЦена.Единица.Получить(ДатаДок);
	КонецЕсли;
	Возврат ЕдЦены;
КонецФункции//ВернутьЕдиницуЦены()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле ввода "Продукция"
//---------------------------
Процедура ПриВыбореТовара()
	Если (Товар.Выбран() = 1) Тогда
		Если ПустоеЗначение(ЕдиницаИзмерения) = 1 Тогда
			ЕдиницаИзмерения = Товар.ОсновнаяЕдиницаИзмерения;
		Иначе
			Спр = СоздатьОбъект("Справочник.ЕдиницыНоменклатуры");
			Спр.ИспользоватьВладельца(Товар);
			Если Спр.НайтиПоРеквизиту("ЕдиницаИзмерения", ЕдиницаИзмерения.ЕдиницаИзмерения, 0) = 1 Тогда
				ЕдиницаИзмерения = Спр.ТекущийЭлемент();
			Иначе	
				ЕдиницаИзмерения = Товар.ОсновнаяЕдиницаИзмерения;
			КонецЕсли;
		КонецЕсли;
		Количество = ?(Количество = 0, 1, Количество);
		глПересчет(Контекст);
	Иначе
		ЕдиницаИзмерения = "";
		Цена = 0;Сумма = 0;
		НДС = 0;НП = 0;
	КонецЕсли;
КонецПроцедуры//ПриВыбореТовара

//---------------------------
// НАЗНАЧЕНИЕ:
//	Пересчитывает суммы в документе при смене варианта расчета налогов.
//	Вызывается из формул элементов диалога:Поле ввода "ВариантРасчетаНалогов".
//---------------------------
Процедура ПриВыбореВариантаРасчетаНалогов()
	Если КоличествоСтрок() > 0 Тогда
		ОбщееКоличество = КоличествоСтрок();
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			глПересчет(Контекст,"Сумма");
			Состояние("Обработано: " + Окр(НомерСтроки/ОбщееКоличество*100, 0, 1) + "%");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ПриВыбореВариантаРасчетаНалогов()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
// В зависимости от характера задолженности устанавливает 
// цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//---------------------------
Процедура РасчетТекущегоДолга()
	Если (Контрагент.Выбран() = 0) ИЛИ (Договор.Выбран() = 0)  Тогда
		Возврат;
	КонецЕсли;
	
	Если Договор.НеКонтролироватьКредит = 0 Тогда
		Если Выбран() = 0 Тогда
			КонецПериода = ДатаДок;
		Иначе
			КонецПериода = ТекущийДокумент();
		КонецЕсли;
		
		Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
			Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
			               "Расчет итогов выполняется в режиме"+РазделительСтрок+
						   """Операции - Управление бухгалтерскими итогами"".");
			Возврат;
		КонецЕсли;
		
		БИ = СоздатьОбъект("БухгалтерскиеИтоги");
		БИ.ИспользоватьСубконто(ВидыСубконто.Контрагенты,Контрагент,2,1);
		БИ.ИспользоватьСубконто(ВидыСубконто.Договоры,Договор,2,1);
		
		БИ.ВыполнитьЗапрос(,КонецПериода,"62, 60",,,,,1);
		Если БИ.СКД(1)>0 Тогда
			ТекущийДолг = БИ.СКД(1);
		Иначе
			ТекущийДолг = -БИ.СКК(1);
		КонецЕсли;
	Иначе
		ТекущийДолг = 0;		
	КонецЕсли;
	
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;
КонецПроцедуры//РасчетТекущегоДолга()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Открывает форму дляподбора номенклатуры
//---------------------------
Процедура Подбор()
	ОткрытьПодбор("Справочник.Номенклатура", "ПодборСоСписком",Контекст);
	Если ВариантОтгрузки = 1 Тогда
		Объект = Контрагент;
	Иначе
		Объект = Грузополучатель.Контрагент;
		
		//если у грузополучателя в справочнике "Льготных цен"
		//нет элементов, то цены берему у контрагента (плательщика)
		СпрЛЦ = СоздатьОбъект("Справочник.ЛьготныеЦены");
		СпрЛЦ.ИспользоватьВладельца(Контрагент);
		Если СпрЛЦ.ВыбратьЭлементы() = 0 Тогда
			Объект = Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначениеВПодборе("Контрагент", Объект);
	УстановитьЗначениеВПодборе("ТипЦен", ТипЦен);
КонецПроцедуры//Подбор()
                        
//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ОбработкаПодбора(Элемент,КонтФормы)
	Если ТипЗначенияСтр(Элемент) = "ТаблицаЗначений" Тогда
		ТЗ = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(ТЗ);
		УдалитьСтроки();
		
		Элемент.ВыбратьСтроки();
		Пока Элемент.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Товар = Элемент.Товар;
			Количество=Элемент.Количество;
			КоличествоПлюс=Элемент.КоличествоПлюс;
			ЕдиницаИзмерения=Элемент.ЕдиницаИзмерения;
			
			НомСтр = 0;
			Если ТЗ.НайтиЗначение(Элемент.Товар, НомСтр, "Товар") = 1  Тогда
				ТЗ.ПолучитьСтрокуПоНомеру(НомСтр);
				Если (ВидПеревозки = Перечисление.ВидыПеревозок.Самовывоз) И (ПустаяСтрока(ТЗ.ВремяВыхода) = 1) Тогда
					ВремяВыхода = Строка(ДатаДок);
				Иначе
					ВремяВыхода = ТЗ.ВремяВыхода;
				КонецЕсли;
			Иначе
				Если ВидПеревозки = Перечисление.ВидыПеревозок.Самовывоз Тогда
					ВремяВыхода = Строка(ДатаДок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		глПриИзмененииТипаЦен(Контекст,Нет);
		
		ДобавитьУслуги();

		ВесПродукции = Итог("Вес");
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если Товар.ПринадлежитГруппе(Константа.УслугиПриОтгрузкеПродукции) = 1 Тогда
				Если Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Материал Тогда
				Иначе
					Количество = ВесПродукции;
					КоличествоПлюс = 0;
					глПересчет(Контекст,"Количество");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Форма.Обновить(1);
		
		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
			Форма.Закладки.ТекущаяСтрока(2);
			Форма.ИспользоватьСлой("Общий,ТабличнаяЧасть,Кнопки");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры//ОбработкаПодбора()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:"ВидПеревозки"
//---------------------------
Процедура ПриВыбореВидаПеревозки()
	Если ВидПеревозки = Перечисление.ВидыПеревозок.Самовывоз Тогда
		Форма.ИспользоватьСлой("Самовывоз", 1);
		Форма.ИспользоватьСлой("ТранспортПоставщика", 0);
	Иначе		
		Форма.ИспользоватьСлой("Самовывоз", 0);
		Форма.ИспользоватьСлой("ТранспортПоставщика", 1);
	КонецЕсли;
КонецПроцедуры//ПриВыбореВидаПеревозки()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:"Грузополучатель"
//---------------------------
Процедура ПриВыбореГрузополучателя()
	ФлагЦенаПолучена = 0; ФлагВидПеревозки = 0; ФлагВариантРасчетаНалогов = 0;
	
	Если Грузополучатель.Выбран() = 1 Тогда
		ВариантОтгрузки = 0;
		
		Если ПустоеЗначение(Грузополучатель.Контрагент) = 0 Тогда
			Если (ПустоеЗначение(Грузополучатель.Контрагент.ОсновнойТипЦен.Получить(ДатаДок)) = 0) И (Контрагент.ВариантПечатиТТН = 0) Тогда
				ТипЦен = Грузополучатель.Контрагент.ОсновнойТипЦен.Получить(ДатаДок);
				ФлагЦенаПолучена = 1;
			КонецЕсли;
			
			Если ПустоеЗначение(Грузополучатель.Контрагент.ОсновнойВидПеревозки) = 0 Тогда
				ВидПеревозки = Грузополучатель.Контрагент.ОсновнойВидПеревозки;
				ФлагВидПеревозки = 1;
			КонецЕсли;
			
			Если ПустоеЗначение(Грузополучатель.Контрагент.ОсновнойВариантРасчетаНалогов) = 0 Тогда
				ВариантРасчетаНалогов	= Грузополучатель.Контрагент.ОсновнойВариантРасчетаНалогов;
				ФлагВариантРасчетаНалогов = 1;
			КонецЕсли;
			
		Иначе	
			ВариантОтгрузки = 1;
			Грузополучатель = ПолучитьПустоеЗначение("Справочник.Грузополучатели");
		КонецЕсли;
	Иначе	
		ВариантОтгрузки = 1;
		Грузополучатель = ПолучитьПустоеЗначение("Справочник.Грузополучатели");
	КонецЕсли;
	
	Если ФлагЦенаПолучена = 0 Тогда
		ТипЦен = ?(ПустоеЗначение(Контрагент) = 1,ПолучитьПустоеЗначение("Справочник.ТипыЦен"),Контрагент.ОсновнойТипЦен.Получить(ДатаДок));
	КонецЕсли;
	Если ФлагВидПеревозки = 0 Тогда
		ВидПеревозки = ?(ПустоеЗначение(Контрагент) = 1,ПолучитьПустоеЗначение(),Контрагент.ОсновнойВидПеревозки);
	КонецЕсли;
	Если ПустоеЗначение(ВидПеревозки) = 1  Тогда
		ВидПеревозки = Перечисление.ВидыПеревозок.Автотранспорт
	КонецЕсли;
	ПриВыбореВидаПеревозки();
	
	Если (ТипЦен.ТипЦен = Перечисление.ТипыЦен.Розничная) Тогда
		//розница
		ТипЦен = ТипЦен.БазовыйТипЦен;
	КонецЕсли;

	//вариант расчета налогов и цены (с НДС или нет)
	Если ФлагВариантРасчетаНалогов = 0 Тогда
		ВариантРасчетаНалогов = ?(ПустоеЗначение(Контрагент) = 1,ПолучитьПустоеЗначение(),Контрагент.ОсновнойВариантРасчетаНалогов);
	КонецЕсли;
	
	Если ПустоеЗначение(ВариантРасчетаНалогов) = 1 Тогда
		// не задан ни у плательщика, ни у грузополучателя,
		// определим в соответствии с праметрами в типе цен (если цены заданы с НДС - НДС в сумме, иначе НДС сверху)
		СпрВ = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВ.ПорядокКодов();
		СпрВ.ВыбратьЭлементы();
		Пока СпрВ.ПолучитьЭлемент() = 1 Цикл
			Если (СпрВ.СтавкаНП.Ставка = 0) и (СпрВ.СтавкаНДС.Ставка = 0) И (ТипЦен.ЦенаВключаетНДС = СпрВ.СуммаВключаетНДС) Тогда
				ВариантРасчетаНалогов = СпрВ.ТекущийЭлемент();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПустоеЗначение(ТипЦен) = 0 Тогда
		глПриИзмененииТипаЦен(Контекст,Нет);
	КонецЕсли;
	Форма.ИспользоватьСлой("Грузополучатель", ?(ВариантОтгрузки=1,0,1));
КонецПроцедуры//ПриВыбореГрузополучателя()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:поле ДатаДок.
//---------------------------
Процедура ПриИзмененииДатыДок()
	ПриВыбореГрузополучателя();
	//глПриИзмененииТипаЦен(Контекст,Нет);
КонецПроцедуры//ПриИзмененииДатыДок()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога: вариант отгрузки флажок "он же"
//---------------------------
Процедура ПриВыбореВариантаОтгрузки()
	Если ВариантОтгрузки = 1 Тогда
		//грузополучатель "он же"
		Грузополучатель = ПолучитьПустоеЗначение("Справочник.Грузополучатели");
	Иначе
		Если Контрагент.Выбран() = 1 Тогда
			Если ПустоеЗначение(Контрагент.ОсновнойГрузополучатель) = 1 Тогда
				СпрГ = СоздатьОбъект("Справочник.Грузополучатели");
				СпрГ.ИспользоватьВладельца(Контрагент);
				Если СпрГ.ВыбратьЭлементы() = 1 Тогда
					СпрГ.ПолучитьЭлемент();
					Грузополучатель = СпрГ.ТекущийЭлемент();
				Иначе
					ВариантОтгрузки = 1;
					Грузополучатель = ПолучитьПустоеЗначение("Справочник.Грузополучатели");
				КонецЕсли;
			Иначе
				Грузополучатель = Контрагент.ОсновнойГрузополучатель;
			КонецЕсли;
		Иначе
			ВариантОтгрузки = 1;
			Грузополучатель = ПолучитьПустоеЗначение("Справочник.Грузополучатели");
		КонецЕсли;
	КонецЕсли;
	ПриВыбореГрузополучателя();
КонецПроцедуры//ПриВыбореВариантаОтгрузки()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:"Договор"
//---------------------------
Процедура ПриВыбореДоговора()
	глПриВыбореДоговора(Контрагент, Договор);
КонецПроцедуры//ПриВыбореДоговора()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Вызывается из формул элементов диалога:"Контрагент"
//---------------------------
Процедура ПриВыбореКонтрагента()	
	СпрГ = СоздатьОбъект("Справочник.Грузополучатели");
	Если СпрГ.НайтиПоРеквизиту("Контрагент", Контрагент, 1) = 1 Тогда
		//выбранный контрагент является грузополучателем
		Контрагент = СпрГ.Владелец;
		Грузополучатель = СпрГ.ТекущийЭлемент();
	КонецЕсли;
	
	глПриВыбореКонтрагента(Контрагент, Договор);
	
	Если Контрагент.Выбран() = 1 Тогда
		Если ПустоеЗначение(Грузополучатель) = 1 Тогда
		    Грузополучатель = Контрагент.ОсновнойГрузополучатель;
		Иначе
			Если Грузополучатель.Владелец <> Контрагент Тогда
				Грузополучатель = Контрагент.ОсновнойГрузополучатель;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВариантОтгрузки = 1;
		Грузополучатель = ПолучитьПустоеЗначение("Справочник.Грузополучатели");
	КонецЕсли;   
	
	Склад=Константа.ОсновнойСкладГП;
	ПриВыбореГрузополучателя();
	ДОЛГ_ = 0;
	БИ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ.ИспользоватьСубконто(ВидыСубконто.Контрагенты,Контрагент,2,1);
	БИ.ИспользоватьСубконто(ВидыСубконто.Договоры,Договор,2,1);
	Если Проведен()=1 тогда
		БИ.ВыполнитьЗапрос(,ТекущийДокумент(),"62, 60",,,,,1); 
	иначе
		БИ.ВыполнитьЗапрос(,ДатаДок,"62, 60",,,,,1); 
	конецЕсли; 
	Если БИ.СКД(1)>0 Тогда
		ДОЛГ_ = БИ.СКД(1);
	Иначе
		ДОЛГ_ = -БИ.СКК(1);
	КонецЕсли; 
	Если проведен()=0 тогда
	Долг_=Долг_+Итог("Всего"); 
	конецЕсли;
	Форма.Долг.Заголовок(Долг_);
	Форма.Обновить();
КонецПроцедуры//ПриВыбореКонтрагента()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ВводНового(ПризнКопирования,ОбъектКопирования)
	Новый = 1;
	Если ПризнКопирования = 0 Тогда
		Склад = глЗначениеПоУмолчанию("ОсновнойСкладГП");
		ВариантОтправки=1;
		ВариантОтгрузки=1;
		
		Смена = глПолучитьСмену(Лев(ТекущееВремя(),5));
	Иначе
		ДокументОснование = "";
		СчетФактура = "";
	КонецЕсли;
	Автор = глПользователь;
КонецПроцедуры//ВводНового()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ВводНаОсновании(ДокОснование)
	Новый = 1;
	Если ДокОснование.Вид() = "Заявка" Тогда
		//проверим была ли отгрузка на основании заявки
		Док =СоздатьОбъект("Документ");
		Док.ВыбратьПодчиненныеДокументы(,,ДокОснование);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Вид() = Вид() Тогда
				Предупреждение("На основании документа """+ДокОснование+""" уже введен документ """+Док.ТекущийДокумент()+"""", 10);
				СтатусВозврата(0);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДатаДок = ДокОснование.ДатаДок;
		
		Контрагент = ДокОснование.Контрагент;
		Договор = ДокОснование.Договор;
		Грузополучатель = ДокОснование.Грузополучатель;
		ТипЦен = ДокОснование.ТипЦен;
		ВидПеревозки = ДокОснование.ВидПеревозки;
		ВариантРасчетаНалогов = ДокОснование.ВариантРасчетаНалогов;
		ДокументОснование = ДокОснование;
		ВариантОтправки = ДокОснование.ВариантОтправки;
		ВариантОтгрузки = ДокОснование.ВариантОтгрузки;
		Грузоотправитель  = ДокОснование.Грузоотправитель;
		Склад = ДокОснование.Склад;
		Смена = ДокОснование.Смена;
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Товар = ДокОснование.Товар;
			ЕдиницаИзмерения = ДокОснование.ЕдиницаИзмерения; 
			ЕдИзмЕДИ	= ДокОснование.ЕдИзмЕДИ;
			Количество = ДокОснование.Количество;
			КоличествоПлюс = ДокОснование.КоличествоПлюс;
			Цена = ДокОснование.Цена;
			Сумма = ДокОснование.Сумма;
			НДС = ДокОснование.НДС;
			НП = ДокОснование.НП;
			Всего = ДокОснование.Всего;
			СуммаСкидки = ДокОснование.СуммаСкидки;
			
			Вес = ДокОснование.Вес;
			ВсегоКоличество = ДокОснование.ВсегоКоличество;
		КонецЦикла;
	КонецЕсли;
	Комментарий = "Введен на основании: "+ГлПредставлениеДокумента(ДокОснование);
	Автор = глПользователь;
КонецПроцедуры//ВводНового()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриОткрытии()
	Конт = Форма.Параметр;
	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст"  Тогда
		Если Конт.Вид() = "Рейс" Тогда
			Записать();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если (Форма.ТолькоПросмотр() = 0) И (ПравоДоступа("Корректировка","Документ.СчетФактура") = 0) Тогда
		Если Отметка = 2 Тогда
			Форма.ТолькоПросмотр(1);
			Предупреждение("Документ проверен бухгалтером. Разрешен только просмотр документа!", 4);
			
		ИначеЕсли ПустоеЗначение(СчетФактура) = 0  Тогда
			Форма.ТолькоПросмотр(1);
			Предупреждение("Выписана счет фактура. Разрешен только просмотр документа!", 4);
			
		КонецЕсли;
	КонецЕсли;
	
	Валюта = глРубли;
	Курс = глРубли.Курс.Получить(ДатаДок);
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнСохранить.Доступность(0);
		Форма.КнПодбор.Доступность(0);
		Форма.КнУслуги.Доступность(0);
		Форма.КнВремяВыхода.Доступность(0);
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Общий,Основной,Кнопки");
		Форма.ИспользоватьСлой("Грузоотправитель", ?(ВариантОтправки=1,0,1));
		Форма.ИспользоватьСлой("Грузополучатель", ?(ВариантОтгрузки=1,0,1));
		
		Если ВидПеревозки = Перечисление.ВидыПеревозок.Самовывоз Тогда
			Форма.ИспользоватьСлой("Самовывоз", 1);
		Иначе		
			Форма.ИспользоватьСлой("ТранспортПоставщика", 1);
		КонецЕсли;
		
		Активизировать("Контрагент", 1);
	Иначе
		// введенный документ открываем на второй закладке
		РасчетТекущегоДолга();
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Общий,ТабличнаяЧасть,Кнопки");
		
		Если ВидПеревозки = Перечисление.ВидыПеревозок.Автотранспорт Тогда
			//определим рейс
			ДокОтгрузки = ?(ПустоеЗначение(ДокументОснование) = 1, ТекущийДокумент(), ДокументОснование);
			Рейс = ПолучитьпустоеЗначение();
			
			Док = СоздатьОбъект("Документ");
			Док.ВыбратьПодчиненныеДокументы(ДокОтгрузки.ДатаДок,ДокОтгрузки.ДатаДок,ДокОтгрузки);
			Пока Док.ПолучитьДокумент() = 1 Цикл
				Если Док.ПометкаУдаления() = 1  Тогда
					Продолжить;
				КонецЕсли;
				
				Если Док.Вид() = "Рейс" Тогда
					Рейс = Док.ТекущийДокумент();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Активизировать("Количество", 0);
	КонецЕсли;
	
	НачальнаяДатаДокумента = ДатаДок;
	
	ИдентификаторФормы = "Документ_Отгрузка_Форма";
		
	//список колонок видимостью которых будем управлять.
	СписокКолонок = СоздатьОбъект("СписокЗначений");
	СписокКолонок.ДобавитьЗначение("Цена", "Цена");
	СписокКолонок.ДобавитьЗначение("Сумма", "Сумма");
	СписокКолонок.ДобавитьЗначение("Всего", "Всего");
	СписокКолонок.ДобавитьЗначение("НДС", "НДС");
	СписокКолонок.ДобавитьЗначение("СуммаСкидки", "Скидка");
	СписокКолонок.ДобавитьЗначение("ВсегоКоличество", "Кол-во");
	СписокКолонок.ДобавитьЗначение("Вес", "Вес");
	
	СписокКолонок.Пометка(1,1);
	СписокКолонок.Пометка(2,1);
	СписокКолонок.Пометка(3,1);
	
	глУстановитьВидимостьКолонок(Контекст, ИдентификаторФормы, СписокКолонок, 1);
	глВыборПечатнойФормы(Контекст, ИдентификаторФормы, ТаблицаПечатныхФорм, 1);
	
	Форма.Развес.Заголовок("Р," + СокрЛП(Константа.ЕдиницаВесаКг));
	Форма.РамкаКоличество.Заголовок("Количество," + СокрЛП(Константа.ОсновнаяЕдиницаИзмерения.Наименование));  
	
	ДОЛГ_ = 0;
	БИ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ.ИспользоватьСубконто(ВидыСубконто.Контрагенты,Контрагент,2,1);
	БИ.ИспользоватьСубконто(ВидыСубконто.Договоры,Договор,2,1);
	Если Проведен()=1 тогда
		БИ.ВыполнитьЗапрос(,ТекущийДокумент(),"62, 60",,,,,1); 
	иначе
		БИ.ВыполнитьЗапрос(,ДатаДок,"62, 60",,,,,1); 
	конецЕсли; 
	Если БИ.СКД(1)>0 Тогда
		ДОЛГ_ = БИ.СКД(1);
	Иначе
		ДОЛГ_ = -БИ.СКК(1);
	КонецЕсли;
	Если проведен()=0 тогда
	Долг_=Долг_+Итог("Всего");
	конецЕсли;
	Форма.Долг.Заголовок(Долг_);
//	Форма.Обновить();
КонецПроцедуры//ПриОткрытии()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриЗаписи()  
	Модифицирован=0;
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;  
	
	Модифицирован=Модифицированность();
КонецПроцедуры//ПриЗаписи()

//
Процедура ПробитьЧекНаККМ() 
	
	Если (Проведен() = 0) ИЛИ (ЧекПробитККМ = 1) Тогда
		
		Сообщить("Не удалось пробить чек по документу: " + НомерДок);
		
		Возврат;
		
	КонецЕсли;
	          
	СписокТоваров = СоздатьОбъект("ТаблицаЗначений");
	СписокТоваров.НоваяКолонка("ТовНаим"   , "Строка");
	СписокТоваров.НоваяКолонка("Цена"      , "Число");
	СписокТоваров.НоваяКолонка("Количество", "Число");
	СписокТоваров.НоваяКолонка("Сумма"	   , "Число");
	СписокТоваров.НоваяКолонка("СтавкаНДС" , "Строка");
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		Если (Найти(Товар.Наименование,"Пакеты") <> 0) ИЛИ (ПустоеЗначение(Цена) = 1) Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		СписокТоваров.НоваяСтрока();
		
		Если СокрЛП(ВариантРасчетаНалогов.Наименование) = "НДС в сумме"  Тогда
			ФлагНДС = 0;
		ИначеЕсли СокрЛП(ВариантРасчетаНалогов.Наименование) = "НДС сверху" Тогда
			ФлагНДС = 1;
		КонецЕсли;
		
		СписокТоваров.ТовНаим    = Товар.Наименование;
		
		Если ПустоеЗначение(Товар.Развес) = 0 Тогда
			
			Если ПустоеЗначение(Количество) = 1 Тогда
				
				Количество = КоличествоПлюс;
				
			ИначеЕсли ПустоеЗначение(Количество) = 0 Тогда
				
				Количество = Количество * ЕдиницаИзмерения.Коэффициент + КоличествоПлюс;
				
			КонецЕсли;
			
			СписокТоваров.Количество = Количество;
			
			СписокТоваров.Цена = Товар.Развес * (Цена/1000) + ФлагНДС*(НДС/Количество);
			
		ИначеЕсли ПустоеЗначение(Товар.Развес) = 1 Тогда
			
			Количество = Количество * ЕдиницаИзмерения.Коэффициент + КоличествоПлюс;
			
			СписокТоваров.Количество = Количество;
			
			СписокТоваров.Цена = Товар.Развес * (Цена/1000) + ФлагНДС*(НДС/Количество);

		КонецЕсли; 
		
		СписокТоваров.Сумма		 = Всего;
		
		СтавкаНДС  = Товар.СтавкаНДС.Получить(ДатаДок);
		
		Если СокрЛП(СтавкаНДС.Наименование) = "18%" Тогда
			СписокТоваров.СтавкаНДС = "18"
		ИначеЕсли СокрЛП(СтавкаНДС.Наименование) = "10%" Тогда
			СписокТоваров.СтавкаНДС = "10"
		ИначеЕсли СокрЛП(СтавкаНДС.Наименование) = "Без налога (НДС)" Тогда 
			СписокТоваров.СтавкаНДС = "none"
		КонецЕсли;
		
	КонецЦикла;
	
	ПризнВозврата =	0;
	БезНал = 0;
	ТекстВЧеке = СоздатьОбъект("СписокЗначений");

	СуммаЧека = Итог("Всего");
    Получено = СуммаЧека;
	КассирФИО = ПолноеИмяПользователя();
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Процесс"           , "печатать_чек");
	Параметры.Установить("СписокТоваров"     , СписокТоваров);
	Параметры.Установить("СуммаЧека"         , СуммаЧека);
	Параметры.Установить("Получено"          , Получено);
	Параметры.Установить("Возврат"           , ПризнВозврата);
	Параметры.Установить("КассирФИО" 		 , КассирФИО);
	Параметры.Установить("КонтактКлиента"    , КонтактКлиента);
	Параметры.Установить("БезНал"            , БезНал);
	Параметры.Установить("ТекстВЧеке"        , ТекстВЧеке);
	
	ОткрытьФормуМодально("Отчет", Параметры, КаталогИБ() + "ExtForms\ONLINE-54.ert");
	
	Если Параметры.Получить("Результат") = 1 Тогда
		
		ДатаЗапретаРедактирования = Константа.ДатаЗапретаРедактирования;
		
		Константа.ДатаЗапретаРедактирования = ДатаДок - 1;
		
		ЧекПробитККМ = 1;
		
		Записать();
		
		Константа.ДатаЗапретаРедактирования = ДатаЗапретаРедактирования; 
		
	ИначеЕсли Параметры.Получить("Результат") = 0 Тогда
		
		Сообщить(Параметры.Получить("ОписаниеРезультата"));
		
	КонецЕсли;

КонецПроцедуры //ПробитьЧекНаККМ()
//

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриЗакрытии()
	глОткрытьЖурнал(Контекст, Новый, "Журнал.РасходныеНакладные");
              	Если (Модифицирован=1) и (Проведен()=1) тогда
		 //Мракобесие с СФ  
		
		Если (Контрагент.ФормированиеУПД=1) и (Контрагент.ПериодичностьВыпискиСФ=Перечисление.ПериодичностьВыпискиСФ.Документ) тогда
		ДокСФ=СоздатьОбъект("Документ.СчетФактура");
		Если ПустоеЗначение(СчетФактура)=1 Тогда
				ДокСФ.Новый();
				ДокСФ.ДатаДок = ДатаДок;
				ДокСФ.УстановитьНовыйНомер("0");
			Иначе 
			//	Попытка   
				//	НомДокНов=ДокСФ.НомерДок;
					ДокСФ.НайтиДокумент(СчетФактура);
					КолСТрок=ДокСФ.КоличествоСтрок();
				
					
					ДокСФ.СделатьНепроведенным(); 
					ДокСФ.Записать();
					ДокСФ.УдалитьСтроки();
				
				//Исключение 
				//	ДокСФ.Новый(); 
				//	ДокСФ.ДатаДок = ДатаДок;
				//	ДокСФ.УстановитьНовыйНомер("0");
				//КонецПопытки;
			КонецЕсли;
			

			
			ДокСФ.Контрагент = Контрагент;
			ДокСФ.Грузополучатель = Грузополучатель;
			ДокСФ.Договор = Договор;
			
			Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
			    ДокСФ.Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			Иначе
				ДокСФ.Курс = 0;
			КонецЕсли;
			
			ДокСФ.ВариантОтгрузки = ПустоеЗначение(Грузополучатель);
			ДокСФ.ВариантОтправки = 1;
			
			Если Константа.МетодопределенияВыручки.Получить(ДатаДок) = глПоОтгрузке Тогда
				ДокСФ.СчетНДС = 1;
			Иначе
				ДокСФ.СчетНДС = 2;
			КонецЕсли;
			
			ДокСФ.СчетАкциза = 2;
			ДокСФ.ВерсияОбъекта = Константа.НомерРелиза;
			ДокСФ.ОтключитьНДС = 0;
			ДокСФ.ОтключитьАкциз = 0;
			
			ДокСФ.Комментарий = "Накладная № "+НомерДок+" от " +ДатаДок;
		//	ДокСФ.ДокументОснование=;
			ДокСФ.ДатаНачалаПериода = ДатаДок;
			
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если (Итог("Всего") = 0) ИЛИ ((Итог("Количество")+Итог("КоличествоПлюс")) = 0) Тогда
					Продолжить;    
				КонецЕсли;
				
				ДокСФ.НоваяСтрока();
				
				ДокСФ.НазначитьТип("Товар", "Справочник.Номенклатура");
				ДокСФ.Товар				= Товар;
				//	ДокСФ.ЕдиницаИзмерения	= ЕдиницаИзмерения;  
				
				
				ЕдЦены = "";
				НайденнаяЦена = глВернутьТипЦены(Товар, ТипЦен, ДатаДок,ПолучитьПустоеЗначение("Справочник.Контрагенты"));
				Если ПустоеЗначение(НайденнаяЦена) = 0 Тогда
					ЕдЦены = НайденнаяЦена.Единица.Получить(ДатаДок);
				КонецЕсли;
				
				//Если (ЕдЦены = Константа.ЕдиницаВесаТ) ИЛИ (ЕдЦены = Константа.ЕдиницаВесаКг) Тогда
				//	ДокСФ.ЕдиницаИзмерения = Константа.ЕдиницаВесаКг;
				//	ДокСФ.Количество = ?(Вес<>0, Вес, ВсегоКоличество);
				//Иначе	
				//	ДокСФ.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
					ДокСФ.Количество = ВсегоКоличество;
			//	КонецЕсли;
				
			//	ДокСФ.Количество		= ВсегоКоличество;
				
				ДокСФ.Всего	= Всего;
				ДокСФ.НП	= НП;
				
				Если Всего <> Сумма Тогда
					//значит НДС сверху
					Если ПустоеЗначение(Товар.СтавкаНДС.Получить(ДатаДок)) = 0 Тогда
						ДокСФ.НДС = Окр((Всего - НДС)/100*Товар.СтавкаНДС.Получить(ДатаДок).Ставка, 2);
					КонецЕсли;
				Иначе
					//значит НДС в сумме (в штуках!!!)
					Если ПустоеЗначение(Товар.СтавкаНДС.Получить(ДатаДок)) = 0 Тогда
						ДокСФ.НДС = Окр(Всего*Товар.СтавкаНДС.Получить(ДатаДок).Ставка/(100 + Товар.СтавкаНДС.Получить(ДатаДок).Ставка), 2);
					КонецЕсли;
				КонецЕсли;
				
				ДокСФ.Сумма = ДокСФ.Всего - ДокСФ.НДС;
				
				Если (ДокСФ.Товар.ЕдиницаИзмерения = Константа.ЕдиницаВесаТ) ИЛИ (ДокСФ.Товар.ЕдиницаИзмерения = Константа.ЕдиницаВесаКг) Тогда
					ДокСФ.Цена = Цена;
				Иначе
					Если ВсегоКоличество<>0 тогда
						ДокСФ.Цена = Окр(ДокСФ.Сумма / ВсегоКоличество, 2);//!? могут быть проблемы при отрицательном количестве
					иначе
						ДокСФ.Цена=0;
					КонецЕсли;
				КонецЕсли;
				
				ДокСФ.СтавкаНДС = Товар.СтавкаНДС.Получить(ДатаДок);
				ДокСФ.СтавкаНП	= Товар.СтавкаНП.Получить(ДатаДок);
				
				ДокСФ.Счет = СчетПоКоду("90.3");
				ДокСФ.НазначитьТип("Субконто1", ДокСФ.Счет.ВидСубконто(1));
				ДокСФ.НазначитьТип("Субконто2", ДокСФ.Счет.ВидСубконто(2));
				ДокСФ.НазначитьТип("Субконто3", ДокСФ.Счет.ВидСубконто(3));
				Если ТипЗначения(ДокСФ.Товар) <> 2 Тогда
					Если ДокСФ.Товар.Выбран() = 1 Тогда
						ДокСФ.Субконто1 = ДокСФ.Товар.ВидНоменклатуры;
						ДокСФ.Субконто2 = Товар.СтавкаНДС.Получить(ДатаДок);
					КонецЕсли;
				КонецЕсли;
				
				Если ПустоеЗначение(ДокСФ.Товар.СтранаПроисхождения) = 1 Тогда
					ДокСФ.СтранаПроисхождения = "";
					ДокСФ.ГТД = "";
				Иначе
					ДокСФ.СтранаПроисхождения = ДокСФ.Товар.СтранаПроисхождения;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокСФ.КоличествоСтрок()>0 Тогда
				
				

				
				ДокСФ.Записать();
				ДокСФ.Провести();  
				
				ЗаписьЖурналаРегистрации("Документ изменён обработкой Формирование СФ. ", "Документ", "Изменен",	ДокСФ.ТекущийДокумент(), 3);
                
					 ДокСФ.ДокументОснование=ТекущийДокумент(); 
					 ДокСФ.Комментарий= ""+ТекущийДокумент();
					 ДокСФ.Записать();
					 ДокСФ.Провести(); 
					 Попытка
					 СчетФактура=ДокСФ.ТекущийДокумент();
				      Записать(); 
			Исключение
      				ЗаписьЖурналаРегистрации("Документ отгрузка не привязан ", "Документ", "Изменен",	ТекущийДокумент(), 3);

				КонецПопытки;
			КонецЕсли;
		КОнецЕсли;
		
	конецЕсли;


	
КонецПроцедуры//ПриЗакрытии()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Если ИдентЭлемДиалога = "ВариантРасчетаНалогов" Тогда
		ФлагСтандОбр = 0;
		СписокВариантов = СоздатьОбъект("СписокЗначений");
		СпрВариант = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			Если (СпрВариант.СтавкаНП.Ставка = 0) и
				 (СпрВариант.СтавкаНДС.Ставка = 0) Тогда
				СписокВариантов.ДобавитьЗначение(СпрВариант.ТекущийЭлемент());
			КонецЕсли;
		КонецЦикла;
		Значение = ВариантРасчетаНалогов;
		Если СписокВариантов.ВыбратьЗначение(Значение, , , , 2) = 0 Тогда
			Возврат;
		КонецЕсли;
		ВариантРасчетаНалогов = Значение;
		ПриВыбореВариантаРасчетаНалогов();

	ИначеЕсли ИдентЭлемДиалога = "Кладовщик" Тогда
		СЗ = СоздатьОбъект("СписокЗначений");
		СпрС = СоздатьОбъект("Справочник.Сотрудники");
		СпрС.ВыбратьЭлементы();
		Пока СпрС.ПолучитьЭлемент() = 1 Цикл
			Если (СокрЛП(СпрС.Должность) = "кладовщик готовой продукции") Тогда
				СЗ.ДобавитьЗначение(СпрС.ТекущийЭлемент());	
			КонецЕсли;
		КонецЦикла;
		
		ОтборПоРеквизиту.ДобавитьЗначение(СЗ);
		
		
	КонецЕсли;
КонецПроцедуры//ПриНачалеВыбораЗначения()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриВводеСтроки()
	Подбор();
	СтатусВозврата(0);
КонецПроцедуры//ПриВводеСтроки()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриРедактированииНовойСтроки()
	Если ВидПеревозки = Перечисление.ВидыПеревозок.Самовывоз Тогда
		ВремяВыхода = Строка(ДатаДок);
	КонецЕсли;
КонецПроцедуры//ПриРедактированииНовойСтроки()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриНачалеРедактированияСтроки()
	Если Товар.Выбран() = 1 Тогда
		Если Форма.ТекущаяКолонка() = "ФлагУпаковки" Тогда
			Если Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
				НеУпакована = ?(НеУпакована = 0, 1, 0);
				СтатусВозврата(0);
			КонецЕсли;
		Иначе	
			Если Товар.ПринадлежитГруппе(Константа.УслугиПриОтгрузкеПродукции) = 1 Тогда
				Если Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Материал  Тогда
					Если Форма.ТекущаяКолонка() <> "Количество" Тогда
						СтатусВозврата(0);
					КонецЕсли;
				Иначе
					СтатусВозврата(0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры//ПриНачалеРедактированияСтроки()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриОкончанииРедактированияСтроки(НовСтр)
	ВыбратьСтроки();
	ВесПродукции = Итог("Вес");
	Пока ПолучитьСтроку() = 1 Цикл
		Если Товар.ПринадлежитГруппе(Константа.УслугиПриОтгрузкеПродукции) = 1 Тогда
			Если Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга  Тогда
				Количество = ВесПродукции;
				глПересчет(Контекст,"Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	ДОЛГ_ = 0;
	БИ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ.ИспользоватьСубконто(ВидыСубконто.Контрагенты,Контрагент,2,1);
	БИ.ИспользоватьСубконто(ВидыСубконто.Договоры,Договор,2,1);
	Если Проведен()=1 тогда
		БИ.ВыполнитьЗапрос(,ТекущийДокумент(),"62, 60",,,,,1); 
	иначе
		БИ.ВыполнитьЗапрос(,ДатаДок,"62, 60",,,,,1); 
	конецЕсли; 
	Если БИ.СКД(1)>0 Тогда
		ДОЛГ_ = БИ.СКД(1);
	Иначе
		ДОЛГ_ = -БИ.СКК(1);
	КонецЕсли; 
	Если проведен()=0 тогда
	Долг_=Долг_+Итог("Всего");
	конецЕсли;
	Форма.Долг.Заголовок(Долг_);
	Форма.Обновить(1);
КонецПроцедуры//ПриОкончанииРедактированияСтроки(НовСтр)

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриУдаленииСтроки()
	ВесПродукции = Итог("Вес")-Вес;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если Товар.ПринадлежитГруппе(Константа.УслугиПриОтгрузкеПродукции) = 1 Тогда
			Если Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга  Тогда
				Количество = ВесПродукции;
				глПересчет(Контекст,"Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Форма.Обновить(1);
КонецПроцедуры//ПриУдаленииСтроки()

//---------------------------
// НАЗНАЧЕНИЕ:
//	Предопределенная процедура
//---------------------------
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
 	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Общий,Основной,Кнопки");
		Форма.ИспользоватьСлой("Грузоотправитель", ?(ВариантОтправки=1,0,1));
		Форма.ИспользоватьСлой("Грузополучатель", ?(ВариантОтгрузки=1,0,1));
		
		Если ВидПеревозки = Перечисление.ВидыПеревозок.Самовывоз Тогда
			Форма.ИспользоватьСлой("Самовывоз", 1);
		Иначе		
			Форма.ИспользоватьСлой("ТранспортПоставщика", 1);
		КонецЕсли;
		
	Иначе
		Форма.ИспользоватьСлой("Общий,ТабличнаяЧасть,Кнопки");
	КонецЕсли;
КонецПроцедуры//ПриВыбореЗакладки

//---------------------------
Новый = 0;

// формируем таблицу печатных форм
ТаблицаПечатныхФорм = СоздатьОбъект("ТаблицаЗначений");
глИнициализацияТаблицыПечатныхФорм(ТаблицаПечатныхФорм);


ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "ТН";
ТаблицаПечатныхФорм.Название = "ТН";
ТаблицаПечатныхФорм.Кнопка = "ТН";
ТаблицаПечатныхФорм.ЧислоКопий = 1; 

ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "ТН_ТТН";
ТаблицаПечатныхФорм.Название = "ТН+ТТН";
ТаблицаПечатныхФорм.Кнопка = "ТН+ТТН";
ТаблицаПечатныхФорм.ЧислоКопий = 1;


//добавим информацию о встроенной форме
ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "ТТН";
ТаблицаПечатныхФорм.Название = "ТТН";
ТаблицаПечатныхФорм.Кнопка = "ТТН";
ТаблицаПечатныхФорм.ЧислоКопий = 1;
//ТаблицаПечатныхФорм.ИзменятьЧислоКопий = 1;

ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "УКиБ";
ТаблицаПечатныхФорм.Название = "Удостоверение качества";
ТаблицаПечатныхФорм.Кнопка = "УКиБ";
ТаблицаПечатныхФорм.ЧислоКопий = 1;

ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "ТТН_УКиБ";
ТаблицаПечатныхФорм.Название = "ТТН и Удостоверение качества";
ТаблицаПечатныхФорм.Кнопка = "ТТН+УКиБ";
ТаблицаПечатныхФорм.ЧислоКопий = 2; 
ТаблицаПечатныхФорм.ИзменятьЧислоКопий = 1; 

ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "ЗаказОтвес";
ТаблицаПечатныхФорм.Название = "Заказ-отвес";
ТаблицаПечатныхФорм.Кнопка = "Заказ";
ТаблицаПечатныхФорм.ЧислоКопий = 1;

ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "Пропуск";
ТаблицаПечатныхФорм.Название = "Пропуск";
ТаблицаПечатныхФорм.Кнопка = "Пропуск";
ТаблицаПечатныхФорм.ЧислоКопий = 1; 

//ТаблицаПечатныхФорм.НоваяСтрока();
//ТаблицаПечатныхФорм.Идентификатор = "ТТН1";
//ТаблицаПечатныхФорм.Название = "ТТН(ст)";
//ТаблицаПечатныхФорм.Кнопка = "ТТН(ст)";
//ТаблицаПечатныхФорм.ЧислоКопий = 2;
//ТаблицаПечатныхФорм.ИзменятьЧислоКопий = 1;
//
//ТаблицаПечатныхФорм.НоваяСтрока();
//ТаблицаПечатныхФорм.Идентификатор = "ТТН_УКиБ1";
//ТаблицаПечатныхФорм.Название = "ТТН и Удостоверение качества(ст)";
//ТаблицаПечатныхФорм.Кнопка = "ТТН+УКиБ(ст)";
//ТаблицаПечатныхФорм.ЧислоКопий = 2; 
//ТаблицаПечатныхФорм.ИзменятьЧислоКопий = 1; 

ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "СчетФактураСВ";
ТаблицаПечатныхФорм.Название = "СФ для Гр.п";
ТаблицаПечатныхФорм.Кнопка = "СФ для Гр.п";
ТаблицаПечатныхФорм.ЧислоКопий = 2;
ТаблицаПечатныхФорм.ИзменятьЧислоКопий = 1;

ТаблицаПечатныхФорм.НоваяСтрока();
ТаблицаПечатныхФорм.Идентификатор = "Все";
ТаблицаПечатныхФорм.Название = "<все формы>";
ТаблицаПечатныхФорм.Кнопка = "<все>";

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Ввести на основании");
//КОНЕЦ  -- 08.12.03
*********************************************************************
Процедура ПриемАванса()
	
	СписокТоваров = СоздатьОбъект("ТаблицаЗначений");
	СписокТоваров.НоваяКолонка("ТовНаим"   , "Строка");
	СписокТоваров.НоваяКолонка("Цена"      , "Число");
	СписокТоваров.НоваяКолонка("Количество", "Число");
	СписокТоваров.НоваяКолонка("Сумма"	   , "Число");
	СписокТоваров.НоваяКолонка("СтавкаНДС" , "Строка");
	СписокТоваров.НоваяКолонка("ПризнакСпособаРасчета" , "Строка");
	СписокТоваров.НоваяКолонка("ПризнакПредметаРасчета" , "Строка");
	
	СписокТоваров.НоваяСтрока();
	СписокТоваров.ТовНаим    = "Оплата от: " + Субконто1.ПолнНаименование + " .Основание: " + ДвижениеДенежныхСредств.Наименование;
	СписокТоваров.Цена       = Сумма;
	СписокТоваров.Количество = 1; 
	СписокТоваров.Сумма		 = Сумма;
	СписокТоваров.СтавкаНДС  = "18/118";
	СписокТоваров.ПризнакСпособаРасчета = "3";
	СписокТоваров.ПризнакПредметаРасчета = "10";
	
	КассирФИО = ПолноеИмяПользователя();
	ЧекНаВозврат = 0;

	Параметры = СоздатьОбъект("СписокЗначений");
	
	Параметры.Установить("Процесс"          , "печатать_чек");
	Параметры.Установить("СписокТоваров"    , СписокТоваров);
	Параметры.Установить("КассирФИО" 		, КассирФИО);
	Параметры.Установить("ЧекНаВозврат" 	, ЧекНаВозврат);
	Параметры.Установить("СуммаНаличными"   , Сумма);
	Параметры.Установить("НомерСекции"      , "2");
	
	ОткрытьФормуМодально("Отчет", Параметры, КаталогИБ() + "ExtForms\ONLINE-54.ert");
	
КонецПроцедуры